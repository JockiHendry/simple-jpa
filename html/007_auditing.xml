<?xml version="1.0" encoding="UTF-8"?>

<?asciidoc-toc?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" lang="en">
<info>
<title>Untitled</title>
<date>2014-09-28</date>
</info>
<section xml:id="_auditing">
<title>Auditing</title>
<section xml:id="_auditable_domain_class">
<title>Auditable Domain Class</title>
<simpara>Classes annotated by <literal>@DomainClass</literal> will automatically have the following auditing properties:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Auditing Properties In Domain Class</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Name</entry>
<entry align="left" valign="top">Type</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>createdDate</simpara></entry>
<entry align="left" valign="top"><simpara>java.util.Date</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>createdBy</simpara></entry>
<entry align="left" valign="top"><simpara>String</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>modifiedDate</simpara></entry>
<entry align="left" valign="top"><simpara>java.util.Date</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>modifiedBy</simpara></entry>
<entry align="left" valign="top"><simpara>String</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>To disable automatic creation of auditing properties for a domain class, use <literal>excludeAuditing</literal> property.  For example:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">@Entity @DomainClass(excludeAuditing=true) @Canonical
class Customer {

}</programlisting>
<simpara>The value for auditing properties are set by JPA entity listener <literal>simplejpa.AuditingEntityListener</literal>.  <xref linkend="create-simple-jpa"/>
command by default will create <literal>griffon-app/conf/metainf/orm.xml</literal> to register <literal>simplejpa.AuditingEntityListener</literal> as default entity listener.
The default content of generated <literal>orm.xml</literal> is:</simpara>
<formalpara>
<title>griffon-app/conf/metainf/orm.xml</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;entity-mappings version="2.0" xmlns="http://java.sun.com/xml/ns/persistence/orm"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xsi:schemaLocation="http://java.sun.com/xml/ns/persistence/orm orm_2_0.xsd"&gt;

&lt;persistence-unit-metadata&gt;
    &lt;persistence-unit-defaults&gt;
        &lt;entity-listeners&gt;
            &lt;entity-listener class="simplejpa.AuditingEntityListener" /&gt;
        &lt;/entity-listeners&gt;
    &lt;/persistence-unit-defaults&gt;
&lt;/persistence-unit-metadata&gt;

&lt;/entity-mappings&gt;</programlisting>
</para>
</formalpara>
<tip>
<simpara>You can completely disable auditing by removing the line that register <literal>simplejpa.AuditingEntityListener</literal> in <literal>orm.xml</literal>.</simpara>
</tip>
<tip>
<simpara>You can also register your own custom JPA Entity Listener in <literal>orm.xml</literal>.</simpara>
</tip>
<simpara>Built-in scaffolding&#8217;s generator will generate views that has auditing properties in them.  By default, generated views display
<literal>java.util.Date</literal> by its string representation such as <literal>Wed Aug 20 13:09:11 ICT 2014</literal>.  To display <literal>java.util.Date</literal> by using
a custom formatter, style for both date and time can be specified in <literal>Config.groovy</literal>:</simpara>
<formalpara>
<title>Config.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">griffon.simplejpa.scaffolding.dateTimeStyle = 'MEDIUM'</programlisting>
</para>
</formalpara>
<simpara>The configuration above will generate the following code in controller:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">def selectionChanged = {
   ...
   model.created = selected.createdDate?DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM).format(selected.createdDate):null
   model.modified = selected.modifiedDate?DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM).format(selected.modifiedDate):null
   ...
}</programlisting>
<simpara>The following is list of available styles (see <link xlink:href="http://docs.oracle.com/javase/tutorial/i18n/format/dateFormat.html">http://docs.oracle.com/javase/tutorial/i18n/format/dateFormat.html</link> for more information):</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Possible Values for Date Time Style Configuration</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="33*"/>
<colspec colname="col_2" colwidth="33*"/>
<colspec colname="col_3" colwidth="33*"/>
<thead>
<row>
<entry align="left" valign="top">Style</entry>
<entry align="left" valign="top">Sample Value in U.S. Locale</entry>
<entry align="left" valign="top">Sample Value in French Locale</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>DEFAULT</simpara></entry>
<entry align="left" valign="top"><simpara>Jun 30, 2009 7:03:47 AM</simpara></entry>
<entry align="left" valign="top"><simpara>30 juin 2009 07:03:47</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>SHORT</simpara></entry>
<entry align="left" valign="top"><simpara>6/30/09 7:03 AM</simpara></entry>
<entry align="left" valign="top"><simpara>30/06/09 07:03</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>MEDIUM</simpara></entry>
<entry align="left" valign="top"><simpara>Jun 30, 2009 7:03:47 AM</simpara></entry>
<entry align="left" valign="top"><simpara>30 juin 2009 07:03:47</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>LONG</simpara></entry>
<entry align="left" valign="top"><simpara>June 30, 2009 7:03:47 AM PDT</simpara></entry>
<entry align="left" valign="top"><simpara>30 juin 2009 07:03:47 PDT</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>FULL</simpara></entry>
<entry align="left" valign="top"><simpara>Tuesday, June 30, 2009 7:03:47 AM PDT</simpara></entry>
<entry align="left" valign="top"><simpara>mardi 30 juin 2009 07 h 03 PDT</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<tip>
<simpara>You can always change the generated code to use any custom formatter.</simpara>
</tip>
</section>
<section xml:id="_logged_user">
<title>Logged User</title>
<simpara>simple-jpa expects the value of current user is stored in <literal>SimpleJpaUtil.user</literal>.  Value for this property must be an
an implementation of <literal>AuditableUser</literal>.  For example, developer can create a domain class that implement <literal>AuditableUser</literal> such as:</simpara>
<formalpara>
<title>User.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">package domain

import ...

@DomainClass @Entity @Canonical
class User implements AuditableUser {

    @NotEmpty @Size(min=2, max=50)
    String name

    @Override
    String getUserName() {
        return name
    }

}</programlisting>
</para>
</formalpara>
<simpara>The following code can be used to set current (logged) user:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">User user = new User('guest')
SimpleJpaUtil.instance.user = user</programlisting>
<simpara>The code above will set <literal>createdBy</literal> and <literal>modifiedBy</literal> of new entity or updated entity to <literal>'guest'</literal>.</simpara>
<tip>
<simpara>You&#8217;re not required to set current user.  If <literal>SimpleJpaUtil.user</literal> is null, value for <literal>createdBy</literal> and <literal>modifiedBy</literal>
 will be ignored.  Regardless whether <literal>SimpleJpaUtil.user</literal> is available or not, <literal>createdTime</literal> and <literal>modifiedTime</literal> are always updated.</simpara>
</tip>
</section>
<section xml:id="_login_dialog">
<title>Login Dialog</title>
<simpara>simple-jpa can display a login dialog by using SwingX <literal>JXLoginPane</literal> at startup time.  To enable this feature, a service
that is derived from <literal>org.jdesktop.swingx.auth.LoginService</literal> is required.  The following is typical steps to create
 such service:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Create a new service by using Griffon&#8217;s <literal>create-service</literal> command.  For example:</simpara>
<literallayout class="monospaced">griffon create-service DatabaseLoginService</literallayout>
</listitem>
<listitem>
<simpara>Change the generated service (in <literal>griffon-app/services</literal> folder) and extends it from <literal>org.jdesktop.swingx.auth.LoginService</literal>.  For example:</simpara>
<formalpara>
<title>DatabaseLoginService.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">package sample

import domain.User
import org.jdesktop.swingx.auth.LoginService
import simplejpa.SimpleJpaUtil

class DatabaseLoginService extends LoginService {

    @Override
    boolean authenticate(String name, char[] password, String server) throws Exception {
        if (name == 'jocki' &amp;&amp; new String(password) == 'toor') {
            SimpleJpaUtil.instance.user = new User('jocki')
            return true
        }
        false
    }

}</programlisting>
</para>
</formalpara>
<tip>
<simpara>If you add <literal>@Transaction</literal> to <literal>DatabaseLoginService</literal> and add the following line to <literal>Config.groovy</literal> (See <xref linkend="finders-2"/> for more information):</simpara>
<formalpara>
<title>Config.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">griffon.simplejpa.finders.injectInto = ['controller', 'service']</programlisting>
</para>
</formalpara>
<simpara>You will have access to simple-jpa dynamic finders in <literal>authenticate()</literal> method.  Typically, you will query the requested user
from database and check if user&#8217;s password is correct.</simpara>
</tip>
</listitem>
<listitem>
<simpara>Add the service name as value for <literal>griffon.simplejpa.auditing.loginService</literal> in <literal>Config.groovy</literal>.  For example:</simpara>
<formalpara>
<title>Config.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">griffon.simplejpa.auditing.loginService = 'DatabaseLoginService'</programlisting>
</para>
</formalpara>
</listitem>
</orderedlist>
<simpara>When application is started, the following login dialog will be displayed:</simpara>
<figure>
<mediaobject>
<imageobject>
<imagedata fileref="login_dialog.png"/>
</imageobject>
<textobject><phrase>login dialog</phrase></textobject>
</mediaobject>
</figure>
<simpara>If user cancels the dialog, simple-jpa will terminate the application.  If user enters the correct credentials (which means
<literal>LoginService.authenticate()</literal> returns <literal>true</literal>), simple-jpa will display startup group as usual.</simpara>
</section>
</section>
</article>