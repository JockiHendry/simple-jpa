<?xml version="1.0" encoding="UTF-8"?>

<?asciidoc-toc?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" lang="en">
<info>
<title>Untitled</title>
<date>2014-07-30</date>
</info>
<section xml:id="_finders">
<title>Finders</title>
<simpara>Finders are dynamic methods that are used to retrieve entities from database. By following their naming pattern, developer can easily execute query for any domain classes.</simpara>
<section xml:id="_query_configuration">
<title>Query Configuration</title>
<simpara>All finders except find[DomainClass]By[Attributes]() have query configuration as their parameter. Query configuration is stored in a Map. The possible keys for query configuration are:</simpara>
<literallayout class="monospaced">excludeSubclass
flushMode
excludeDeleted
orderBy
orderDirection
page
pageSize
allowDuplicate</literallayout>
<simpara>If excludeSubclass value is <emphasis>*</emphasis>, it will exclude all subclasses of the domain class. It can also accepts a String that contains comma separated class name to be excluded.</simpara>
<simpara>For example, assuming Employee has two subclasses: Teacher and Staff, the following finder will return all instances of Employee including all Teacher and all Staff.</simpara>
<simpara>findAllEmployee()</simpara>
<simpara>The following finder will return only instance of Employee but not Teacher or Staff:</simpara>
<simpara>findAllEmployee([excludeSubclass: <emphasis>*</emphasis>])</simpara>
<simpara>The following finder will return all instance of Employee and all instance of Teacher but excluding all Staff:</simpara>
<simpara>findAllEmployee([excludeSubclass: <emphasis>Staff</emphasis>])</simpara>
<simpara>flushMode configuration key accepts FlushModeType.COMMIT or FlushModeType.AUTO. Use this key to override flush mode for specific queries.</simpara>
<simpara>If excludeDeleted is true, then finder will not return soft deleted entities. An entity is considered as soft deleted if its deleted attribute is not equals to <emphasis>N</emphasis>.</simpara>
<simpara>orderBy will causes finder to sort results based on certains attributes. To sort based on more than one attribute, use comma separated attribute name as shown in the following:</simpara>
<simpara>findAllEmployee([orderBy: <emphasis>name,salary</emphasis>])</simpara>
<simpara>Since simple-jpa 0.7, orderBy accept model__attribute syntax, for example:</simpara>
<simpara>findAllEmployee([orderBy: <emphasis>department__name</emphasis>])</simpara>
<simpara>To set order direction, use orderDirection. This key accept <emphasis>asc</emphasis> for ascending order and <emphasis>desc</emphasis> for descending order. For example, the following finder will find all Employee sorted by name and salary in descending order:</simpara>
<simpara>findAllEmployee([orderBy: <emphasis>name,salary</emphasis>, orderDirection: <emphasis>desc,desc</emphasis>])</simpara>
<simpara>To limit the result to certain page, set the value for page (starting from 1) and pageSize. If pageSize is not specified, simple-jpa will assume 1 page consists of 10 rows. For example, the following finder will limit the results to the first 3 entities:</simpara>
<simpara>findAllTeacher([orderBy: <emphasis>salary</emphasis>, page: 1, pageSize: 3])</simpara>
</section>
<section xml:id="_basic_finder">
<title>Basic Finder</title>
<simpara>This finder will return a List that contains all instances of a domain class. If no instances are found, it will return an empty List.</simpara>
<simpara>Example:</simpara>
<simpara>def allStudents = findAllStudent()
def allTeachers = findAllTeacher()</simpara>
<simpara>This finder can be used to quickly find instances of domain class based on one or more attributes value using and or or logical operator.</simpara>
<simpara>For example, the following finder will return all female Student in class <emphasis>A3</emphasis>:</simpara>
<simpara>List result = findAllStudentByAnd([classRoom: <emphasis>A3</emphasis>, gender: <emphasis>F</emphasis>])</simpara>
<simpara>The following finder will return a Student whose name is Steven and class is <emphasis>A3</emphasis> (if it is not found, the finder will return null value):</simpara>
<simpara>Student s = findStudentByAnd([name: <emphasis>Steven</emphasis>, classRoom: <emphasis>A3</emphasis>])</simpara>
<simpara>An alternative syntax for this finder is:</simpara>
<simpara>Student s = findByAnd(Student, [name: <emphasis>Steven</emphasis>, classRoom: <emphasis>A3</emphasis>])</simpara>
<simpara>This is the most flexible finder. It allows complex searching in one method call. For example, this finder will search all female Student in class <emphasis>A3</emphasis>:</simpara>
<simpara>List result1 = findAllStudentByClassRoomEqAndGenderEq(<emphasis>A3</emphasis>,<emphasis>F</emphasis>)
List result2 = findAllStudentByClassRoomAndGender(<emphasis>A3</emphasis>, <emphasis>F</emphasis>)</simpara>
<simpara>The default operator used for comparison is eq (equality) if operator is not specified. The following is list of supported operators:</simpara>
<literallayout class="monospaced">greaterThanEqualTo or ge
lessThanEqualTo or le
greaterThan or gt
lessThan or lt
isNotMember
isNotEmpty
isNotNull
notEqual or ne
isMember
isEmpty
isNull
like
notLike
between
equal or eq</literallayout>
<simpara>For example, the following finder will return all Student in class room <emphasis>A3</emphasis> whose score is less than 70:</simpara>
<simpara>List result = findAllStudentByClassRoomAndScoreLt(<emphasis>A3</emphasis>, 70)</simpara>
<simpara>The following finder will return only one Student whose name contains <emphasis>jack</emphasis> or null if not found:</simpara>
<simpara>Student s = findStudentByNameLike(<emphasis>%jack%</emphasis>)</simpara>
</section>
<section xml:id="_dsl_finder">
<title>DSL Finder</title>
<simpara>This finder will perform a query based on closure (Dsl). For example, the following finder will return all Student in class room <emphasis>A3</emphasis> whose score is less than 70:</simpara>
<simpara>List result = findAllStudentByDsl {
    classRoom eq(<emphasis>A3</emphasis>)
    and()
    score lt(70)
}</simpara>
<simpara>Note that it is important to separate these conditions and logical operator by line.</simpara>
<simpara>The benefit of using Dsl closure is developer can build the query conditions on the fly. For example, it is typical to perform searching based on one or more user selection in view:</simpara>
<simpara>List result = findAllInvoiceByDsl {
    if (model.txtNumber) {
       number like("%${txtNumber}%")
    }
    if (model.selectedSupplier) {
       and()
       supplier eq(selectedSupplier)
    }
    if (model.paid) {
       and()
       paid eq(true)
    }
}</simpara>
<simpara>An alternative syntax for this finder is:</simpara>
<simpara>List result = findByDsl(Student) {
    classRoom eq(<emphasis>A3</emphasis>)
    and()
    score lt(70)
}</simpara>
<simpara>Since version 0.5.2, this method can accept nested path by separating them using double underscores (__). For example, to find Orders based on their OrderItem&#8217;s Category, use the following code:</simpara>
<simpara>List result = findOrderByDsl {
    orderItem<emphasis>category</emphasis>name eq(<emphasis>CAT1</emphasis>)
}</simpara>
<simpara>Since version 0.7, this DSL allow isIn operator. For example:</simpara>
<simpara>List result = findOrderByDsl {
    orderItem__category isIn([<emphasis>CAT1</emphasis>, <emphasis>CAT2</emphasis>, <emphasis>CAT3</emphasis>])
}</simpara>
</section>
<section xml:id="_using_named_entity_graph">
<title>Using Named Entity Graph</title>
<simpara>Since simple-jpa 0.7, most finders now accept Fetch[Graph]. This will allow user to use a defined named entity graph in finders. To use this feature, JPA 2.1 provider is required. User can define named entity graphs by using @NamedEntityGraph annotation.</simpara>
<simpara>For example:</simpara>
<simpara>List result = findOrderByIdFetchItems(<emphasis>ORDER-1</emphasis>)</simpara>
<simpara>will find Order with id equals to "ORDER-1" and fecth the result using Items entity graph. To use the code, a named entity graph called Items must be defined.</simpara>
</section>
</section>
</article>