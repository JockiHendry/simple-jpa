<?xml version="1.0" encoding="UTF-8"?>

<?asciidoc-toc?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" lang="en">
<info>
<title>Untitled</title>
<date>2014-07-30</date>
</info>
<appendix xml:id="_methods">
<title>Methods</title>
<simpara>simple-jpa will inject JPA related methods to all controllers (or other artifacts configured in
<literal>griffon.simplejpa.finders.injectInto</literal>). These methods are always public.</simpara>
<section xml:id="_begintransaction">
<title>beginTransaction()</title>
<simpara>It is not recommended to call this method directly. This is a low level method that will be called by <literal>@Transaction</literal>.</simpara>
<simpara>Use this method to start a new transaction. If resume parameter is true, it will join the previous transaction if
previous transaction is exists. If newSession parameter is true, this method will destroy previous EntityManager.</simpara>
<simpara>Example of low level operations using simple-jpa:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">beginTransaction()
def em = getEntityManager()
... // perform works with em
em.close()
commitTransaction()</programlisting>
</section>
<section xml:id="_committransaction">
<title>commitTransaction()</title>
<simpara>It is not recommended to call this method directly. This is a low level method that will be called by <literal>@Transaction</literal>.</simpara>
<simpara>Use this method to commit a transaction.</simpara>
<simpara>Example of low level operations using simple-jpa:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">beginTransaction()
def em = getEntityManager()
... // perform works with em
em.close()
commitTransaction()</programlisting>
</section>
<section xml:id="_createentitymanager">
<title>createEntityManager()</title>
<simpara>It is not recommended to call this method directly. This is a low level method that will be called by <literal>@Transaction</literal>.</simpara>
<simpara>Use this method to create a new EntityManager for current thread.</simpara>
</section>
<section xml:id="_destroyentitymanager">
<title>destroyEntityManager()</title>
<simpara>It is not recommended to call this method directly. This is a low level method that will be called by <literal>@Transaction</literal>.</simpara>
<simpara>Use this method to close all open EntityManager.</simpara>
</section>
<section xml:id="_executenamedquery">
<title>executeNamedQuery()</title>
<simpara>Use this method to execute JPA named query. This method will return a List that contains the result from named query
execution. The syntax of this method is:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">def executeNamedQuery(String namedQuery, Map args, Map config = [:])</programlisting>
<simpara><literal>namedQuery</literal> is the name of JPA named query that will be executed. <literal>args</literal> is a <literal>Map</literal> that stores query parameter values.
<literal>config</literal> is an optional query configuration.</simpara>
<simpara>This is an example of JPA Named Query declaration:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">@NamedQuery(name='Product.CalculateTotal', query='''
    SELECT SUM(i.qty) FROM items i WHERE
    i.product = :product AND (i.date &lt;= :endDate)
'''
class Product {

}</programlisting>
<simpara>To call the named query declared above, use the following code:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">Product p = findProductByCode('P001')
def total = executeNamedQuery('Product.CalculateTotal',
    [product: p, endDate: LocalDate.now()])[0]</programlisting>
</section>
<section xml:id="_executenativequery">
<title>executeNativeQuery()</title>
<simpara>Use this method to execute native SQL. This is a low level query method (from JPA point of view) so it is better to use
<literal>executeQuery()</literal> if possible. This method will return a <literal>List</literal> that contains the result from SQL execution.</simpara>
<simpara>The syntax of this method is:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">def executeNativeQuery (String sql, Map config = [:])</programlisting>
<simpara><literal>sql</literal> is SQL string that will be executed. <literal>config</literal> is an optional query configuration.</simpara>
<simpara>Example:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">def mysqlDbUser = executeNativeQuery('SELECT user()')[0]</programlisting>
</section>
<section xml:id="_executequery">
<title>executeQuery()</title>
<simpara>Use this method to execute JP QL. This method will return a List that contains the result from JP QL execution.
The syntax of this method is:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">def executeQuery (String jpql, Map config = [:], Map args = [:])</programlisting>
<simpara><literal>jpql</literal> is JP QL string that will be executed. <literal>config</literal> is an optional query configuration.</simpara>
<simpara>Example:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">def allStudents = executeQuery('FROM Student')</programlisting>
</section>
<section xml:id="_getentitymanager">
<title>getEntityManager()</title>
<simpara>It is not recommended to call this method directly. It is better to use simple-jpa methods rather than calling
EntityManager methods directly.</simpara>
<simpara>This method will return EntityManager for current thread.</simpara>
<simpara>Example:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">createEntityManager()
def em = getEntityManager()
// do something with em
destroyEntityManager()</programlisting>
</section>
<section xml:id="_merge">
<title>merge()</title>
<simpara>This is a shortcut for calling <literal>merge()</literal> method of current EntityManager. Use this method to put a detached entity into
current EntityManager.</simpara>
<simpara>Example:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">merge(student)</programlisting>
</section>
<section xml:id="_persist">
<title>persist()</title>
<simpara>This is a shortcut for calling <literal>persist()</literal> method of current EntityManager. Use this method to save a new entity into
database.</simpara>
<simpara>Example:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">Student s = new Student()

// insert operation
persist(s)

// update operation
s.name = 'new'</programlisting>
</section>
<section xml:id="_remove">
<title>remove()</title>
<simpara>This method will call <literal>remove()</literal> method of current EntityManager. Before executing <literal>remove()</literal>, simple-jpa will try to
merge the entity if it is detached. Use this method to delete an entity from database.</simpara>
<simpara>Example:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">findAllStudentByName('%Steve%').each {
  remove(it)
}</programlisting>
</section>
<section xml:id="_rollbacktransaction">
<title>rollbackTransaction()</title>
<simpara>It is not recommended to call this method directly. This is a low level method that will be called by <literal>@Transaction</literal>.</simpara>
<simpara>Use this method to rollback a transaction and clear the EntityManager.</simpara>
<simpara>Example of low level operations using simple-jpa:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">beginTransaction()
def em = getEntityManager()
... // perform works with em
rollbackTransaction()
em.close()</programlisting>
</section>
<section xml:id="_softdelete">
<title>softDelete()</title>
<simpara>Use this method to set deleted attribute to <literal><emphasis>Y</emphasis></literal>. In simple-jpa, a soft deleted entity is an entity whose deleted
attribute is not equals to <emphasis>N</emphasis>. To automatically add deleted attribute to an entity, use <literal>@DomainClass</literal> annotation.</simpara>
<simpara>Example:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">findAllStudentByName('%steve%').each {
    softDelete(it)
}</programlisting>
</section>
<section xml:id="_validate">
<title>validate()</title>
<simpara>Use this method to validate an entity. The syntax for this method is:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">def validate(entity, group = Default, viewModel = null)</programlisting>
<simpara><literal>entity</literal> is the entity that will be validated (by using Java Validation API). <literal>group</literal> is an optional interface that
marks one or more validation annotation as a group. By default, all declared validation annotations is part of
Default group.</simpara>
<simpara>This method will store validation result in model in the same MVCGroup or use viewModel value. All models in application
that uses simple-jpa will have the following injected attributes and methods:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">ObservableMap errors = new ObservableMap(new ConcurrentHashMap())

boolean hasError() // return true if errors is not empty</programlisting>
<simpara>Validation will not be performed if <literal>model.hasError()</literal> is <literal>true</literal>. It is important to clear the previous errors before
reattempting validation.</simpara>
<simpara>If entity is not valid, this method will return <literal>false</literal>. Otherwise, it will return <literal>true</literal>. If this method return <literal>false</literal>,
it will store failed attributes and their error messages in <literal>model.errors</literal>.</simpara>
<simpara>This is an example of domain class with Java Validation API annotations:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">@DomainClass @Entity @Canonical
class Student {
   @Size(min=2, max=50)
   String name

   @Min(0l) @Max(100l)
   Integer score
}</programlisting>
<simpara>This is an example validation for the instance of domain class above:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">Student s = new Student('a', 101)
model.errors.clear()
boolean result = validate(s)

println "Result is $result"
println "Messages: ${model.errors}"

// Output:
// Result is false
// Messages: [score:must be less than or equal to 100, name:size must be between 2 and 50]</programlisting>
<simpara>To change the error messages returned by Java Validation API, edit the following file: <literal>/griffon-app/i18n/ValidationMessages.properties</literal>.</simpara>
</section>
<section xml:id="_withtransaction">
<title>withTransaction()</title>
<simpara>This method will execute a closure as one transaction. The code inside the closure can call simple-jpa dynamic methods directly.</simpara>
<simpara>Example:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">repository.withTransaction {
   Student student = findStudentByName("me");
   if (student) remove(student)
}</programlisting>
</section>
</appendix>
</article>