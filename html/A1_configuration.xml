<?xml version="1.0" encoding="UTF-8"?>

<?asciidoc-toc?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" lang="en">
<info>
<title>Untitled</title>
<date>2014-08-20</date>
</info>
<appendix xml:id="_configuration">
<title>Configuration</title>
<simpara>simple-jpa can be configured by adding configuration lines in <literal>griffon-app/conf/Config.groovy</literal>. Adding JPA provider
properties can also be done directly by editing <literal>griffon-app/conf/metainf/persistence.xml</literal> or by using system
properties.</simpara>
<section xml:id="_domain_package">
<title>Domain Package</title>
<simpara>simple-jpa doesn&#8217;t use any metadata to manage domain classes. The only way for simple-jpa to find or to write domain
classes is by inspecting the content of domain package. All domain classes should be located in this domain package.
By default, the name of domain package is <literal>domain</literal>.</simpara>
<simpara>Developer can change the name of domain package by using this configuration line. For example, the following
configuration change the name of domain package to <literal>com.example.domain</literal>:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">griffon.simplejpa.domain.package='com.example.domain'</programlisting>
<warning>
<simpara>Changing this configuration value will not move existing domain classes to the new domain package. This value
merely used as an indicator to find domain classes.</simpara>
</warning>
</section>
<section xml:id="_default_flush_mode">
<title>Default Flush Mode</title>
<simpara>Use this configuration key to change the default <literal>flushMode</literal> for all EntityManager in application. The possible values
for flushMode is <literal><emphasis>COMMIT</emphasis></literal> and <literal><emphasis>AUTO</emphasis></literal>. The default value for <literal>flushMode</literal> is depends on JPA provider.</simpara>
<simpara>For example, the following configuration line will set <literal>flushMode</literal> for all EntityManager to <literal>DefaultFlushModeType.COMMIT</literal>:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">griffon.simplejpa.entityManager.defaultFlushMode = 'COMMIT'</programlisting>
<simpara>Default flushMode can be overriden in certain queries by using <literal>flushMode</literal> query configuration.</simpara>
</section>
<section xml:id="_entity_manager_properties">
<title>Entity Manager Properties</title>
<simpara>In most cases, JPA properties can be added directly to <literal>griffon-app/conf/metainf/persistence.xml</literal>. The following is
content of a typical <literal>persistence.xml</literal> file for desktop application:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;persistence xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/persistence" xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd" version="2.0"&gt;
  &lt;persistence-unit name="default" transaction-type="RESOURCE_LOCAL"&gt;
    &lt;provider&gt;org.hibernate.ejb.HibernatePersistence&lt;/provider&gt;
    &lt;class&gt;domain.Student&lt;/class&gt;
    &lt;class&gt;domain.Classroom&lt;/class&gt;
    &lt;properties&gt;
      &lt;property name="javax.persistence.jdbc.driver" value="com.mysql.jdbc.Driver"/&gt;
      &lt;property name="javax.persistence.jdbc.url" value="jdbc:mysql://localhost/mydatabase"/&gt;
      &lt;property name="javax.persistence.jdbc.user" value="scott"/&gt;
      &lt;property name="javax.persistence.jdbc.password" value="tiger"/&gt;
      &lt;property name="hibernate.connection.autocommit" value="false"/&gt;
      &lt;property name="hibernate.dialect" value="org.hibernate.dialect.MySQL5Dialect"/&gt;
      &lt;property name="hibernate.hbm2ddl.auto" value="create-drop"/&gt;
      &lt;property name="jadira.usertype.autoRegisterUserTypes" value="true"/&gt;
    &lt;/properties&gt;
  &lt;/persistence-unit&gt;
&lt;/persistence&gt;</programlisting>
<simpara>Developer can override properties in <literal>persistence.xml</literal> by adding configuration line with
<literal>griffon.simplejpa.entityManager.properties</literal> key. For example, the following configuration will result in the same
JPA properties as above:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">griffon {
    simplejpa {
        entityManager {
            properties  {
                javax.persistence.jdbc.driver = 'com.mysql.jdbc.Driver'
                javax.persistence.jdbc.url = 'jdbc:mysql://localhost/mydatabase'
                javax.persistence.jdbc.user = 'scott'
                javax.persistence.jdbc.password = 'tiger'
                hibernate.connection.autocommit = 'false'
                hibernate.dialect = 'org.hibernate.dialect.MySQL5Dialect'
                jadira.usertype.autoRegisterUserTypes=  'true'
            }
        }
    }
}</programlisting>
<simpara>Another way to override JPA provider properties is by writing the properties in a file called <literal>simplejpa.properties</literal>.
Content of the file is in Groovy&#8217;s config format just like the one specified in <literal>Config.groovy</literal>. simple-jpa will search
for this file in current working directory. If the file exists, its content will override properties in
<literal>persistence.xml</literal> and <literal>Config.groovy</literal>.</simpara>
<simpara>This is a convenient way to modify JPA properties without changing source code. It is common to put database connection
properties in <literal>simplejpa.properties</literal> so that changing database connection will not require touching application&#8217;s source
code.</simpara>
<simpara>The following is sample content of <literal>simplejpa.properties</literal>:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">javax {
    persistence {
        jdbc {
            driver = 'com.mysql.jdbc.Driver'
            url = 'jdbc:mysql://localhost/mydatabase'
            user = 'scott'
            password = 'tiger'
        }
    }
}
hibernate {
    connection {
	autocommit = 'false'
    }
    dialect = 'org.hibernate.dialect.MySQL5Dialect'
}
jadira.usertype.autoRegisterUserTypes=  'true'</programlisting>
<simpara>Developer can change location and name of the <literal>simplejpa.properties</literal> by adding <literal>griffon.simplejpa.entityManager.propertiesFile</literal>
configuration line. For example, in the following configuration, simple-jpa will search for a file called <literal>connection.db</literal>
in root directory of drive C:</simpara>
<screen>griffon.simplejpa.entityManager.propertiesFile = 'C:/connection.db'</screen>
</section>
<section xml:id="_soft_delete">
<title>Soft Delete</title>
<simpara>If the value for this configuration key is <literal>true</literal>, simple-jpa finders will not return soft deleted objects. A soft
deleted object is an object whose deleted attribute is not equals to <literal><emphasis>N</emphasis></literal>. The deleted attribute is available on all
domain classes that have <literal>@DomainClass</literal> annotation. To soft delete an domain object, use <literal>softDelete()</literal> method.</simpara>
<simpara>Note that developer can still retrieve soft deleted objects by using <literal>executeQuery()</literal>, <literal>executeNativeQuery()</literal>, or
passing <literal>false</literal> to <literal>excludeDeleted</literal> query configuration.</simpara>
<simpara>By default, the value for this configuration key is <literal>false</literal>. To enable it, add the following line to <literal>Config.groovy</literal>:</simpara>
<screen>griffon.simplejpa.finders.alwaysExcludeSoftDeleted = true</screen>
</section>
<section xml:id="_finders">
<title>Finders</title>
<simpara>By default, simple-jpa will inject JPA related methods such as finders to all Griffon&#8217;s controllers. This causes all
controllers to act as public repositories with the abilities to retrieve arbitary domain objects. While this pattern
reduces complexity, some people may want to appoint service layer as repository layer (instead of controllers as
repositories). This can be achieved by adding the following configuration line:</simpara>
<programlisting language="grooovy" linenumbering="unnumbered">griffon.simplejpa.finders.injectInto = ['service']</programlisting>
<simpara>The following examples will cause simple-jpa to inject JPA related methods to all controllers and all models:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">griffon.simplejpa.finders.injectInto = ['controller', 'model']</programlisting>
<simpara>To avoid conflict with existing methods in controller, simple-jpa can add prefix to its dynamic methods. For example,
the following configuration line will add jpa prefix to simple-jpa dynamic methods:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">griffon.simplejpa.finders.prefix = 'jpa'
// This will add 'jpa' prefix to dynamic methods name, for example:
// findAllStudent() becomes jpaFindAllStudent()</programlisting>
<simpara>The following dynamic methods will never have prefix:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>beginTransaction()</literal></simpara>
</listitem>
<listitem>
<simpara><literal>commitTransaction()</literal></simpara>
</listitem>
<listitem>
<simpara><literal>rollbackTransaction()</literal></simpara>
</listitem>
<listitem>
<simpara><literal>return_failed()</literal></simpara>
</listitem>
<listitem>
<simpara><literal>createEntityManager()</literal></simpara>
</listitem>
<listitem>
<simpara><literal>destroyEntityManager()</literal></simpara>
</listitem>
<listitem>
<simpara><literal>getEntityManager()</literal></simpara>
</listitem>
</itemizedlist>
<simpara>Since simple-jpa 0.7, by default, duplicate entities returned by finders will be ignored. To allow finders to return
duplicate entities, add the following line:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">griffon.simplejpa.finders.alwaysAllowDuplicate = true</programlisting>
</section>
<section xml:id="_validation">
<title>Validation</title>
<simpara>In some cases, validation may be failed because the empty JTextField value in model is an empty String and not a null
value. To create a consistent behaviour, simple-jpa can translate all empty String into a null value before performing
validation. This feature is disabled by default. To enable it, add the following configuration line:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">griffon.simplejpa.validation.convertEmptyStringToNull = true</programlisting>
</section>
<section xml:id="_scaffolding">
<title>Scaffolding</title>
<simpara>To enable automatic scaffolding when compiling classes, add the following configuration line:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">griffon.simplejpa.scaffolding.auto = true</programlisting>
<simpara>Another scaffolding related configurations are:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Scaffolding Configuration</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="33*"/>
<colspec colname="col_2" colwidth="33*"/>
<colspec colname="col_3" colwidth="33*"/>
<thead>
<row>
<entry align="left" valign="top">Key</entry>
<entry align="left" valign="top">Expected Value</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>griffon.simplejpa.scaffolding.generator</literal></simpara></entry>
<entry align="left" valign="top"><simpara>A string.</simpara></entry>
<entry align="left" valign="top"><simpara>The full class name that is instance of <literal>Generator</literal>.  Default value is <literal>simplejpa.scaffolding.generator.basic
.BasicGenerator</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>griffon.simplejpa.scaffolding.generatedPackage</literal></simpara></entry>
<entry align="left" valign="top"><simpara>A string.</simpara></entry>
<entry align="left" valign="top"><simpara>The location of target package for MVC artifacts.  Default value is <literal>project</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>griffon.simplejpa.scaffolding.startupGroup</literal></simpara></entry>
<entry align="left" valign="top"><simpara>A string.</simpara></entry>
<entry align="left" valign="top"><simpara>The name of startup group.  If it is not defined, no startup group will be generated.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>griffon.simplejpa.scaffolding.ignoreLazy</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>true</literal> or <literal>false</literal>.</simpara></entry>
<entry align="left" valign="top"><simpara>If <literal>true</literal>, lazy attributes will be included in generated code.  Default value is <literal>true</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>griffon.simplejpa.scaffolding.forceOverwrite</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>true or `false</literal>.</simpara></entry>
<entry align="left" valign="top"><simpara>If <literal>true</literal>, existing files will be overwritten.  Default value is <literal>false</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>griffon.simplejpa.scaffolding.skipExcel</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>true</literal> or <literal>false</literal></simpara></entry>
<entry align="left" valign="top"><simpara>If <literal>true</literal>, not Excel file (for integration testing) will be created.  Default value is <literal>false</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>griffon.simplejpa.scaffolding.dateTimeStyle</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>'DEFAULT'</literal>, <literal>'SHORT'</literal>, <literal>'MEDIUM'</literal>, <literal>'LONG'</literal>, or <literal>'FULL'</literal>.</simpara></entry>
<entry align="left" valign="top"><simpara>Represent formatting styles for auditing properties that are instances of <literal>java.util.Date</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>griffon.simplejpa.scaffolding.target</literal></simpara></entry>
<entry align="left" valign="top"><simpara>A string that consists of domain class names or <literal>'*'</literal>.</simpara></entry>
<entry align="left" valign="top"><simpara>List of domain classes to generate.  If <literal>'*'</literal>, all domain classes will be generated.  Default value is <literal>'*'</literal>.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
</section>
<section xml:id="_auditing">
<title>Auditing</title>
<simpara>To display a login dialog at startup time, set a service name for <literal>griffon.simplejpa.auditing.loginService</literal>.  This service must be an
instance of <literal>org.jdesktop.swingx.auth.LoginService</literal>.</simpara>
<formalpara>
<title>Config.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">griffon.simplejpa.auditing.loginService = 'DatabaseLoginService'</programlisting>
</para>
</formalpara>
</section>
</appendix>
</article>