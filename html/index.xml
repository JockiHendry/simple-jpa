<?xml version="1.0" encoding="UTF-8"?>

<?asciidoc-toc?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" lang="en">
<info>
<title><i class="icon-reorder" id='nav-icon'></i> simple-jpa 0.8</title>
<date>2015-02-01</date>
</info>
<section xml:id="introduction">
<title>Introduction</title>
<simpara>simple-jpa is a Griffon plugin for developing JPA and Swing based desktop application. The main goal of simple-jpa is
to allow developer to concentrate on business logic. simple-jpa provides much functionality that is needed when working
with JPA, therefore, frees developer from writing high-ceremony code.</simpara>
<simpara>simple-jpa is very useful for rapidly developing Swing-based database oriented desktop application. It can also be used
for prototyping.</simpara>
<simpara>The following is a list of some of simple-jpa’s features:</simpara>
<variablelist>
<varlistentry>
<term>Scaffolding</term>
<listitem>
<simpara>simple-jpa can generate an MVCGroup based on a domain class. This will speed up development.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Dynamic finders</term>
<listitem>
<simpara>simple-jpa injects dynamic finders to controllers (or services). With dynamic finders, developer can perform a query on
JPA entities (or domain objects) quickly and easily. simple-jpa also supports the execution of JPA named query, JPQL and
native SQL.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Transaction management</term>
<listitem>
<simpara>Unlike web-based applications, desktop applications do not require Java Transaction API (JTA). simple-jpa automatically
provides and manages transaction for each method in controllers (can be configured by using annotation). By default,
simple-jpa will share EntityManager across transaction in a way that is suitable for desktop application.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Bean Validation API (JSR-303) support</term>
<listitem>
<simpara>In the case of failed validation, simple-jpa will automatically present error messages in Swing-based view. Developer
can also configure error notification and its behavior.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Common database application features</term>
<listitem>
<simpara>simple-jpa adds the following to all domain classes: an id (auto generated primary key), fields that store created time
and last modified time (will be filled automatically), and a soft delete flag (soft delete is marking the object as
inactive without deleting it from database).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Swing nodes for database application</term>
<listitem>
<simpara>simple-jpa provides template renderer for effortlessly represent domain object in JTable, JList or JComboBox. It also
provides new nodes that can be used in Griffon’s view such as tagChooser, numberTextField, maskTextField, and
dateTimePicker.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Integration testing</term>
<listitem>
<simpara>simple-jpa is using dbUnit in integration testing to fill database with predefined data from a Microsoft Excel file
(or csv file). This way, every test cases will be executed with the same table data.</simpara>
</listitem>
</varlistentry>
</variablelist>
<tip>
<simpara>This version is not compatible with Griffon 2.0.  You will need Griffon 1.5 and upgrade its Groovy version to at
least Groovy 2.3.</simpara>
</tip>
</section>
<section xml:id="getting-started">
<title>Getting Started</title>

</section>
<section xml:id="persistence">
<title>Persistence</title>
<simpara>By default, simple-jpa uses Hibernate JPA as persistence layer for your application.  You have to execute <literal>create-simple-jpa</literal>
 to setup persistence layer in your application.  This is the first script you will need to execute when you start a
 new project.</simpara>
<section xml:id="setup">
<title>Setup</title>
<simpara>In order to setup your persistence layer, you need to call <literal>create-simple-jpa</literal> script.  This is usually performed once
 for every new project.  <literal>create-simple-jpa</literal> will create database user and schema for you if they don&#8217;t exists.  Current version
  of simple-jpa only supports MySQL Server and Apache Derby Embedded setup.  If your database is not supported, you should
 configure your database manually.</simpara>
<simpara>If you use MySQL Server, you can execute <literal>create-simple-jpa</literal> like:</simpara>
<literallayout class="monospaced">griffon create-simple-jpa -user=steven -password=12345 -database=sample
   -provider=hibernate -jdbc=mysql -rootPassword=secret</literallayout>
<simpara>Because <literal>hibernate</literal> is default value for <literal>-provider</literal> and <literal>mysql</literal> is default value for <literal>-jdbc</literal>, you can ommit them:</simpara>
<literallayout class="monospaced">griffon create-simple-jpa -user=steven -password=12345 -database=sample
   -rootPassword=secret</literallayout>
<simpara><literal>create-simple-jpa</literal> will check if <literal>sample</literal> database is exists or not.  If <emphasis>sample</emphasis> database doesn&#8217;t exists, it will be created.
  Because this operation requires root user and its password, you need to provide a value in <literal>-rootPassword</literal>.  This password
  won&#8217;t be saved in your application.  <literal>create-simple-jpa</literal> also creates new database user called <emphasis>steven</emphasis> with default password
  <emphasis>12345</emphasis> if it doesn&#8217;t exists yet.  This user will have full privilleges on <emphasis>sample</emphasis> database.</simpara>
<simpara>If you want to use Derby Embedded, you can execute <literal>create-simple-jpa</literal> like:</simpara>
<literallayout class="monospaced">griffon create-simple-jpa -user=steven -password=12345 -database=C:/Users/steven/mydb
  -jdbc=derby-embedded -rootPassword=secret</literallayout>
<simpara>When using <literal>-jdbc=derby-embedded</literal>, it is better to use absolute path for <literal>-database</literal> value.  Derby embedded database will
be created at the specified location.  The draw back of using absolute path is you must make sure database is copied
 to the proper location when you distribute your application.</simpara>
<simpara>Root password is not required when using Derby embedded.  If you didn&#8217;t specify root password, <literal>create-simple-jpa</literal> will
create root user with password equals to user password (in this sample, it is <emphasis>12345</emphasis>).</simpara>
<simpara>In addition to setup your database, <literal>create-simple-jpa</literal> also performs the following steps:</simpara>
<itemizedlist>
<listitem>
<simpara>Create <literal>griffon-app/conf/metainf/persistence.xml</literal> that contains information required to connect to database, such as
JDBC URL, database username and password.</simpara>
</listitem>
<listitem>
<simpara>Create <literal>griffon-app/conf/metainf/orm.xml</literal> that register <literal>AuditingEntityListener</literal>.  This is required if you want to use
<xref linkend="auditing"/> feature.</simpara>
</listitem>
<listitem>
<simpara>Create <literal>griffon-app/i18n/ValidationMessages.properties</literal>.  You can edit this file if you want to change <xref linkend="validation-message"/>.</simpara>
</listitem>
<listitem>
<simpara>Add dependencies to JPA provider and JDBC driver in <literal>griffon-app/conf/BuildConfig.groovy</literal>.</simpara>
</listitem>
</itemizedlist>
<simpara>If you want <literal>create-simple-jpa</literal> to perform the operations above without touching your database, use <literal>-skipDatabase</literal>
argument:</simpara>
<literallayout class="monospaced">griffon create-simple-jpa -user=steven -password=12345 -database=sample -skipDatabase</literallayout>
<simpara>You can instruct your JPA provider to recreate database objects (tables) based on current domain classes by executing
  <literal>generate-schema</literal> script:</simpara>
<literallayout class="monospaced">griffon generate-schema -target=database -action=drop-and-create</literallayout>
<simpara>Rather than directly executing in target database, <literal>generate-schema</literal> can also store the generated SQL statements in a file:</simpara>
<literallayout class="monospaced">griffon generate-schema -target=script -action=create -createTarget=mydatabase.sql</literallayout>
<simpara>The command above will create <literal>mydatabase.sql</literal> in current directory.  This file contains SQL statements to create
 tables required by your application.</simpara>
</section>
<section xml:id="jpa-configurations">
<title>JPA Configurations</title>
<simpara>By default, JPA provider will read persistence layer configurations stored in <literal>persistence.xml</literal>.  The following is a
sample <literal>persistence.xml</literal> created by <literal>create-simple-jpa</literal> script:</simpara>
<formalpara>
<title>persistence.xml</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;persistence xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/persistence" xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd" version="2.0"&gt;
  &lt;persistence-unit name="default" transaction-type="RESOURCE_LOCAL"&gt;
    &lt;provider&gt;org.hibernate.jpa.HibernatePersistenceProvider&lt;/provider&gt;
    &lt;class&gt;domain.Product&lt;/class&gt;
    &lt;class&gt;domain.LineItem&lt;/class&gt;
    &lt;class&gt;domain.Invoice&lt;/class&gt;
    &lt;properties&gt;
      &lt;property name="javax.persistence.jdbc.driver" value="com.mysql.jdbc.Driver"/&gt;
      &lt;property name="javax.persistence.jdbc.url" value="jdbc:mysql://localhost/exercises"/&gt;
      &lt;property name="javax.persistence.jdbc.user" value="steven"/&gt;
      &lt;property name="javax.persistence.jdbc.password" value="12345"/&gt;
      &lt;property name="hibernate.connection.autocommit" value="false"/&gt;
      &lt;property name="hibernate.dialect" value="org.hibernate.dialect.MySQL5Dialect"/&gt;
      &lt;property name="hibernate.connection.provider_class" value="org.hibernate.c3p0.internal.C3P0ConnectionProvider"/&gt;
      &lt;property name="javax.persistence.schema-generation.database.action" value="drop-and-create"/&gt;
      &lt;property name="jadira.usertype.autoRegisterUserTypes" value="true"/&gt;
    &lt;/properties&gt;
  &lt;/persistence-unit&gt;
&lt;/persistence&gt;</programlisting>
</para>
</formalpara>
<simpara>You can add new or edit existing JPA configurations inside <literal>&lt;properties/&gt;</literal>.  For example, setting
<literal>javax.persistence.schema-generation.database.action</literal> to <literal>drop-and-create</literal> makes your JPA provider to recreate
 database tables everytime application is launched.  You may want to disable this to make application startup faster.  If
 you disable auto schema generation, you can still use <literal>generate-schema</literal> to create database tables manually.</simpara>
<simpara>In addition to <literal>persistence.xml</literal>, simple-jpa also reads JPA configurations stored in <literal>Config.groovy</literal> and external
 properties file.  If more than one property are found, simple-jpa uses the value based on the following order:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Configuration passed as system properties (must start with <literal>javax.persistence</literal>) have the first priority.</simpara>
</listitem>
<listitem>
<simpara>Configuration stored in properties file have the first priority.</simpara>
</listitem>
<listitem>
<simpara>Configuration stored in <literal>Config.groovy</literal>.</simpara>
</listitem>
<listitem>
<simpara>Configuration stored in <literal>persistence.xml</literal>.</simpara>
</listitem>
</orderedlist>
<simpara>The following lines show a sample configurations added to <literal>Config.groovy</literal>:</simpara>
<formalpara>
<title>Config.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">griffon {
    simplejpa {
        entityManager {
            properties  {
                javax.persistence.jdbc.driver = 'com.mysql.jdbc.Driver'
                javax.persistence.jdbc.url = 'jdbc:mysql://localhost/mydatabase'
                javax.persistence.jdbc.user = 'scott'
                javax.persistence.jdbc.password = 'tiger'
                hibernate.connection.autocommit = 'false'
                hibernate.dialect = 'org.hibernate.dialect.MySQL5Dialect'
            }
        }
    }
}</programlisting>
</para>
</formalpara>
<simpara>The advantage of storing configurations in <literal>Config.groovy</literal> is you can have different JPA configurations per Griffon
 environments.  For example, the following configurations use different database for different environments:</simpara>
<formalpara>
<title>Config.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">griffon {
  simplejpa {
    entityManager {
      properties {
        environments {
          development {
            javax.persistence.jdbc.url = 'jdbc:mysql://localhost/exercises'
            javax.persistence.jdbc.user = 'steven'
            javax.persistence.jdbc.password = '12345'
          }
          test {
            javax.persistence.jdbc.url = 'jdbc:mysql://localhost/test'
            javax.persistence.jdbc.user = 'test'
            javax.persistence.jdbc.password = 'secret'
            javax.persistence.'schema-generation'.database.action = 'drop-and-create'
          }
        }
      }
    }
  }
}</programlisting>
</para>
</formalpara>
<simpara>If you run the application by using command like <literal>run-app</literal>, it will activate <literal>development</literal> environment.  In this case, JPA
uses database <literal>jdbc:mysql://localhost/exercises</literal>.  If you activate <literal>test</literal> environment (for example by running <literal>test-app</literal>),
JPA uses database <literal>jdbc:mysql://localhost/test</literal>.  It also recreate tables in that database.</simpara>
<simpara>To avoid storing sensitive information such as JDBC URL, username dan password in your source code, you
  can take advantage of Griffon feature to include properties file from <literal>Config.groovy</literal>.  For example, if you store JPA
  configuration to <literal>hibernate.properties</literal>, you can add the following line to <literal>Config.groovy</literal> to include your properties file:</simpara>
<formalpara>
<title>Config.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">griffon.config.locations = ['classpath:hibernate.properties']</programlisting>
</para>
</formalpara>
<simpara>You may want to configure your source code repository to make sure your properties file will never committed to public
server.</simpara>
<simpara>simple-jpa can also be configured to read JPA properties from external properties file.  You can define the location of this
properties file by adding the following line to <literal>Config.groovy</literal>:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">griffon.simplejpa.entityManager.propertiesFile = 'C:/example/db.properties'</programlisting>
<simpara>A sample <literal>db.properties</literal> will look like:</simpara>
<formalpara>
<title>C:/example/db.properties</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">javax.persistence.jdbc.url = 'jdbc:mysql://localhost/test'
javax.persistence.jdbc.user = 'test'
javax.persistence.jdbc.password = 'secret'</programlisting>
</para>
</formalpara>
<simpara>Configurations stored in this properties file will override existing configurations in <literal>Config.groovy</literal> and <literal>persistence.xml</literal>,
 but can be overriden by JVM system properties.  If you didn&#8217;t change <literal>griffon.simplejpa.entityManager.propertiesFile</literal>,
 it defaults to <literal>simplejpa.properties</literal>.  This means you can always override JPA configuration for existing distribution by
 adding a new file called <literal>simplejpa.properties</literal> in the same location when you launched the application.</simpara>
<simpara>simple-jpa supports obfuscating configuration value.  For example, if you want to store obfuscated version of <emphasis>12345</emphasis>, you
 need to execute the following command to retrieve its obsfuscated version:</simpara>
<literallayout class="monospaced">griffon obfuscate -generate='12345'</literallayout>
<simpara>Then, you can use the obfuscated version for any value in any location (such as <literal>Config.groovy</literal>, properties file or
system propeties).  For example, you can add the following line to <literal>Config.groovy</literal>:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">griffon {
  simplejpa {
    entityManager {
      properties {
        javax.persistence.jdbc.password = 'obfuscated:YUqF9w6l5lpvNyH+1tnJBg=='
      }
    }
  }
}</programlisting>
<warning>
<simpara>While obfuscation makes it harder for lay people to read your configuration file, it doesn&#8217;t actually increase
  your security.  Anyone can easily display the original string by executing <literal>griffon obfuscate -reverse</literal>.   You should
  never publish obfuscated value if you don&#8217;t want people to know the original value.</simpara>
</warning>
</section>
<section xml:id="domain-class">
<title>Domain Class</title>
<simpara>simple-jpa provides persistence methods to deal with persistent domain class (marked by <literal>@Entity</literal>).  To create such
  entity, you can use <literal>create-domain-class</literal> script, for example:</simpara>
<literallayout class="monospaced">griffon create-domain-class Invoice LineItem</literallayout>
<simpara>The command creates two new classes: <literal>domain.Invoice</literal> and <literal>domain.LineItem</literal>.  It also add these classes to <literal>persistence.xml</literal>.
  You can change the default base packages for domain classes by setting <literal>griffon.simplejpa.domain.package</literal> in <literal>Config.groovy</literal>.</simpara>
<simpara>You can also specify subpackage when executing <literal>create-domain-class</literal>, for example:</simpara>
<literallayout class="monospaced">griffon create-domain-class sales.Invoice sales.LineItem inventory.Product</literallayout>
<simpara>The command creates three new classes: <literal>domain.sales.Invoice</literal>, <literal>domain.sales.LineItem</literal> and <literal>domain.inventory.Product</literal>.</simpara>
<simpara>Persistent domain classes in simple-jpa is a normal JPA entities.  Just like when using JPA in Java, you can
decorate JPA entity with JPA annotations such as <literal>@Entity</literal>, <literal>@OneToMany</literal>, <literal>@ManyToMany</literal>, <literal>@ManyToOne</literal> and others.
See JPA documentation for more information about JPA annotations.  The following show examples of persistent domain
classes in simple-jpa:</simpara>
<formalpara>
<title>Invoice.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">package domain

// import statements are not shown.

@DomainClass @Entity @Canonical
class Invoice {

  @NotEmpty @Size(min=5, max=5)
  String number


  @NotNull @Type(type="org.jadira.usertype.dateandtime.joda.PersistentLocalDate")
  LocalDate date

  @ElementCollection @OrderColumn @NotEmpty
  List&lt;LineItem&gt; items = []

  void add(LineItem item) {
    items &lt;&lt; item
  }

  BigDecimal total() {
    items.sum { it.total() }
  }

}</programlisting>
</para>
</formalpara>
<formalpara>
<title>LineItem.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">package domain

// import statements are not shown.

@Embeddable @Canonical
class LineItem {

  @NotNull @ManyToOne
  Product product

  @NotNull @Min(0l)
  BigDecimal price

  @NotNull @Min(1l)
  BigDecimal qty

  BigDecimal total() {
    price * qty
  }

}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Product.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">package domain

// import statements are not shown.

@DomainClass @Entity @Canonical
class Product {

  @NotEmpty @Size(min=2, max=50)
  String name

  @NotNull @Min(value=1l)
  BigDecimal retailPrice

}</programlisting>
</para>
</formalpara>
<simpara><literal>@DomainClass</literal> is special annotation provided by simple-jpa.  This annotation automatically adds the following property
 to the annotated class:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">@Id @GeneratedValue(strategy=GenerationType.TABLE)   <co xml:id="CO1-1"/>
Long id  <co xml:id="CO1-2"/>

String deleted = 'N'  <co xml:id="CO1-3"/>

Date createdDate   <co xml:id="CO1-4"/>

String createdBy   <co xml:id="CO1-5"/>

Date modifiedDate  <co xml:id="CO1-6"/>

String modifiedBy  <co xml:id="CO1-7"/></programlisting>
<calloutlist>
<callout arearefs="CO1-1">
<para>To change generation strategy, add desired strategy to <literal>idGenerationStrategy</literal> attribute.</para>
</callout>
<callout arearefs="CO1-2">
<para><literal>@DomainClass(excludeId=true)</literal> will not generate this property.</para>
</callout>
<callout arearefs="CO1-3">
<para><literal>@DomainClass(excludeDeletedFlag=true)</literal> will not generate this property.</para>
</callout>
<callout arearefs="CO1-4 CO1-5 CO1-6 CO1-7">
<para><literal>@DomainClass(excludeAuditing=true)</literal> will not generate these properties.</para>
</callout>
</calloutlist>
<simpara>You aren&#8217;t required to add <literal>@DomainClass</literal> to every persistent domain classes, but some features such as <xref linkend="auditing"/> will
not work without the properties generated by <literal>@DomainClass</literal>.  Of course, you can still code by hand the required properties in
every entities.</simpara>
</section>
<section xml:id="persistence-methods">
<title>Persistence Methods</title>
<simpara>To make it possible for Griffon&#8217;s  artifacts to manage domain classes, simple-jpa injects persistence methods to them.
By default, persistence methods are injected into controller, but you can change it by adding the following line to <literal>Config.groovy</literal>:</simpara>
<formalpara>
<title>Config.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">griffon.simplejpa.finders.injectInto = [ 'service', 'repository' ]</programlisting>
</para>
</formalpara>
<simpara>The configuration above will inject persistence methods to services and repositories.  Repository is a custom artifact type
provided by simple-jpa.  You can create a new repository by using <literal>griffon create-repository</literal>, for example:</simpara>
<literallayout class="monospaced">griffon create-repository MyRepository</literallayout>
<simpara>The script creates <literal>MyRepository.groovy</literal> in <literal>griffon-app/repositories</literal>.</simpara>
<simpara>To retrieve instance of repository, you can use code like:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">def myRepository = SimpleJpaUtil.instance.repositoryManager.findRepository('MyRepository')</programlisting>
<simpara>For a simple application, it is usually acceptable to inject persistence methods to controllers.  If you want a clear
 separation, you should inject persistence methods only to repositories.  You must add <literal>@Transaction</literal> annotation to
 the injected artifacts to enable <xref linkend="transaction"/>.  Class generated by <literal>create-repository</literal> already has <literal>@Transaction</literal>,
 but Griffon&#8217;s controllers do not have <literal>@Transaction</literal> by default.</simpara>
<simpara>The following is list of persistence methods injected by simple-jpa:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>persist(entity)</literal></simpara>
<simpara>Use this method to save new entity.  It is a shortcut for <literal>entityManager.persist()</literal>.</simpara>
</listitem>
<listitem>
<simpara><literal>merge(entity)</literal></simpara>
<simpara>Use this method to add detached entity to current EntityManager.  It is a shortcut for <literal>entityManager.merge()</literal>.</simpara>
</listitem>
<listitem>
<simpara><literal>remove(entity)</literal></simpara>
<simpara>Delete an entity.  It is a shortcut for <literal>entityManager.remove()</literal>.</simpara>
</listitem>
<listitem>
<simpara><literal>softDelete(entity)</literal></simpara>
<simpara>Set <literal>deleted</literal> property of an entity into <literal>'Y'</literal>.</simpara>
</listitem>
<listitem>
<simpara><literal>validate(object)</literal></simpara>
<simpara>See <xref linkend="validation"/> for more information.</simpara>
</listitem>
<listitem>
<simpara>Finders</simpara>
<simpara>See <xref linkend="finders"/> for more information.</simpara>
</listitem>
<listitem>
<simpara><literal>getEntityManager()</literal></simpara>
<simpara>Returns an <literal>EntityManager</literal> for current session.  This method can&#8217;t be renamed.</simpara>
</listitem>
<listitem>
<simpara>Transaction methods</simpara>
<simpara>See <xref linkend="transaction-methods"/> for more information.</simpara>
</listitem>
<listitem>
<simpara>All public methods of <literal>EntityManager</literal>.</simpara>
<simpara>simple-jpa exposes all public methods of <literal>EntityManager</literal> to injected class.  This means you can directly call methods such
as <literal>lock()</literal>, <literal>refresh()</literal>, or <literal>detach()</literal> in injected class.  For more information about <literal>EntityManager</literal>, see JPA documentation.
These methods can&#8217;t be renamed.</simpara>
</listitem>
</itemizedlist>
<tip>
<simpara>All persistence methods are public so you can still call them from different class.</simpara>
</tip>
<simpara>To avoid conflict with existing methods in injected class, simple-jpa can add prefix to persistence methods.  For example,
  you can add the following line to <literal>Config.groovy</literal>:</simpara>
<literallayout class="monospaced">griffon.simplejpa.finders.prefix = 'jpa'</literallayout>
<simpara>Now, every persistence methods that can be renamed will have <emphasis>jpa</emphasis> prefix.  For example, you have to execute <literal>jpaPersist()</literal>
 rather than <literal>persist()</literal>.</simpara>
<simpara>The easiest way to learn simple-jpa persistence methods is by using <literal>simple-jpa-console</literal> script:</simpara>
<literallayout class="monospaced">griffon simple-jpa-console</literallayout>
<simpara>It will launch a Groovy console where you can write code snippet and see the result.</simpara>
<figure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/simple_jpa_console.PNG"/>
</imageobject>
<textobject><phrase>simple jpa console</phrase></textobject>
</mediaobject>
</figure>
<simpara>The main advantage of Groovy console is you can edit existing code and execute it directly by selecting <emphasis>Script</emphasis>, <emphasis>Run</emphasis> (Ctrl+R).
This is many times faster than relaunching application by using <literal>griffon run-app</literal>.  You will find Groovy console very useful
 in testing your code snippet or understanding the result of persistence methods.</simpara>
</section>
</section>
<section xml:id="scaffolding">
<title>Scaffolding</title>
<simpara>Scaffolding feature from simple-jpa can be used to generate MVC groups based on existing domain classes.  This is very
useful in the early phase of application development as it provides guide for further development.
Scaffolding can be invoked by using <literal>generate-all</literal> command or by enabling it in
<literal>Config.groovy</literal>.</simpara>
<simpara>For example, MVC groups for domain class <literal>Student</literal> can be generated by using the following command:</simpara>
<literallayout class="monospaced">griffon generate-all Student</literallayout>
<simpara>simple-jpa will search for definition of <literal>Student</literal> class based on information from <literal>griffon-app/conf/metainf/persistence.xml</literal>.
If it is found, simple-jpa will perform the following actions:</simpara>
<itemizedlist>
<listitem>
<simpara>Create a new <literal>griffon-app/models/project/StudentModel.groovy</literal> if it doesn&#8217;t exists.</simpara>
</listitem>
<listitem>
<simpara>Create a new <literal>griffon-app/views/project/StudentView.groovy</literal> if it doesn&#8217;t exists.</simpara>
</listitem>
<listitem>
<simpara>Create a new <literal>griffon-app/controllers/project/StudentController.groovy</literal> if it doesn&#8217;t exists.</simpara>
</listitem>
<listitem>
<simpara>Search for <literal>student</literal> MVC group.  If it doesn&#8217;t exists, create a new MVC group with the following content:</simpara>
<formalpara>
<title>Application.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">// MVC Group for "student"
'student' {
    model      = 'project.StudentModel'
    view       = 'project.StudentView'
    controller = 'project.StudentController'
}</programlisting>
</para>
</formalpara>
</listitem>
<listitem>
<simpara>Create a new <literal>test/integration/project/StudentTest.groovy</literal> if it doesn&#8217;t exists.</simpara>
</listitem>
<listitem>
<simpara>Create a new <literal>data.xls</literal> if it doesn&#8217;t exists.  Add a single empty sheet named as <literal>student</literal> to the Microsoft Excel
file.  This Excel file will act as data source when invoking <literal>StudentTest.groovy</literal>.  See <xref linkend="testing"/> for more
information.</simpara>
</listitem>
<listitem>
<simpara>Add messages to <literal>griffon-app/i18n/messages.properties</literal> if they don&#8217;t exists.</simpara>
</listitem>
<listitem>
<simpara>Add a generic exception handler in <literal>griffon-app/conf/Events.groovy</literal> if it doesn&#8217;t exists.</simpara>
</listitem>
</itemizedlist>
<simpara>By default, simple-jpa will not modify the content of existing files.  To force simple-jpa to overwrite existing
files, add <literal>-forceOverwrite</literal> parameter when invoking <literal>generate-all</literal>.  For example:</simpara>
<literallayout class="monospaced">griffon generate-all -forceOverwrite Student</literallayout>
<simpara>The default target package for generated MVC artifacts is <literal>project</literal>.  To use a different target package,
<literal>-generatedPackage</literal> should be passed when invoking <literal>generate-all</literal>.  For example:</simpara>
<literallayout class="monospaced">griffon generate-all -generatedPackage=com.jocki.exercises Student</literallayout>
<simpara>The command will place generated MVC artifacts in <literal>com.jocki.exercises</literal> package and register the following MVC group:</simpara>
<formalpara>
<title>Application.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">// MVC Group for "student"
'student' {
    model      = 'com.jocki.exercises.StudentModel'
    view       = 'com.jocki.exercises.StudentView'
    controller = 'com.jocki.exercises.StudentController'
}</programlisting>
</para>
</formalpara>
<simpara>simple-jpa is smart enough to recognize package hierarchy in domain classes.  It will try to preserve the
source package hierarchy in the resulting MVC artifacts.  For example, if <literal>Teacher</literal> is located in <literal>domain.staff</literal>,
then the following command:</simpara>
<literallayout class="monospaced">griffon generate-all -generatedPackage=com.jocki.exercises Teacher</literallayout>
<simpara>will place the generated MVC artifacts in <literal>com.jocki.exercises.staff</literal> and register the following MVC group:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">// MVC Group for "teacher"
'teacher' {
    model      = 'com.jocki.exercises.staff.TeacherModel'
    view       = 'com.jocki.exercises.staff.TeacherView'
    controller = 'com.jocki.exercises.staff.TeacherController'
}</programlisting>
<simpara>In Griffon, startup group is the first MVC group to be instantiated and displayed.  By default, <literal>generate-all</literal> will
not modify the value of current startup group.  This behaviour can be changed by using <literal>-setStartup</literal> parameter.  If
<literal>-setStartup</literal> is passed to <literal>generate-all</literal>, the command will set startup group to the generated MVC group.  For
example, the following command will generate <literal>teacher</literal> MVC group and set it as startup group:</simpara>
<literallayout class="monospaced">griffon generate-all -setStartup Teacher</literallayout>
<important>
<simpara>Since 0.8, simple-jpa generates view as a panel.  Because the generated view doesn&#8217;t have top level container
such as <literal>JFrame</literal>, it can&#8217;t be displayed by itself.  The recommended way to present the view is by creating a
startup group that will act as top level container.</simpara>
</important>
<simpara>simple-jpa can also create a dedicated startup group that serves as container for existing domain class
based MVC groups.  To generate a dedicated startup group, <literal>-startupGroup</literal> parameter should be used with
the startup group&#8217;s name as its value.  For example, the following command will generate <literal>mainGroup</literal> MVC group and set
 it as startup group:</simpara>
<literallayout class="monospaced">griffon generate-all -startupGroup=MainGroup</literallayout>
<simpara>The generated startup group&#8217;s view has a toolbar to launch domain class based MVC groups.  It uses <literal>MainTabbedPane</literal> to display
 selected MVC group.</simpara>
<figure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/default_startup_group.PNG"/>
</imageobject>
<textobject><phrase>default startup group</phrase></textobject>
</mediaobject>
</figure>
<simpara>You can add a new tab to main group from any MVC group by using code like:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">MainGroupView mainView = app.getMvcGroupManager()['mainGroup'].view
mainView.mainTab.addMVCTab('mvcGroupName', [arg1: param1], "Tab Caption")</programlisting>
<simpara><literal>addMVCTab()</literal> always create new MVC group and display it in a new tab.  This means you can have multiple unrelated instances of the
same MVC group.</simpara>
<simpara>Domain class based MVC group generation and startup group generation can also be combined in a single command execution.
For example:</simpara>
<literallayout class="monospaced">griffon generate-all Teacher -startupGroup=MainGroup</literallayout>
<tip>
<simpara>New MVC groups may be generated in the future after startup group has been created.  These new MVC groups will not
appear in current startup group&#8217;s toolbar.  One of possible solutions is recreate the startup group by including
<literal>-forceOverwrite</literal> to overwrite existing startup group:</simpara>
<literallayout class="monospaced">griffon generate-all -startupGroup=MainGroup -forceOverwrite</literallayout>
</tip>
<simpara><literal>generate-all</literal> can accept multiple domain classes separated by space.  For example:</simpara>
<literallayout class="monospaced">griffon generate-all Student Teacher Classroom</literallayout>
<simpara>As a shortcut, <literal>*</literal> can be used as domain class name to generate all registered domain classes. For example:</simpara>
<literallayout class="monospaced">griffon generate-all *</literallayout>
<simpara>Since version 0.8, scaffolding in simple-jpa is performed by an instance of <literal>Generator</literal>.  The default generator
that shipped with simple-jpa is <literal>simplejpa.scaffolding.generator.basic.BasicGenerator</literal>.  To select another generator,
 add <literal>-generator</literal> parameter when invoking <literal>generate-all</literal>.  For example:</simpara>
<literallayout class="monospaced">griffon generate-all -generator=my.custom.Generator *</literallayout>
<simpara>Parameters that have been discussed so far can also be stored in <literal>Config.groovy</literal>.  The following table lists all possible
 values that can be added to <literal>Config.groovy</literal>:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Scaffolding Configuration</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="33*"/>
<colspec colname="col_2" colwidth="33*"/>
<colspec colname="col_3" colwidth="33*"/>
<thead>
<row>
<entry align="left" valign="top">Key</entry>
<entry align="left" valign="top">Expected Value</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>griffon.simplejpa.scaffolding.auto</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>true</literal> or <literal>false</literal>.</simpara></entry>
<entry align="left" valign="top"><simpara>If <literal>true</literal>, scaffolding is always performed everytime application is launched.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>griffon.simplejpa.scaffolding.generator</literal></simpara></entry>
<entry align="left" valign="top"><simpara>A string.</simpara></entry>
<entry align="left" valign="top"><simpara>The full class name that is instance of <literal>Generator</literal>.  Default value is <literal>simplejpa.scaffolding.generator.basic
.BasicGenerator</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>griffon.simplejpa.scaffolding.generatedPackage</literal></simpara></entry>
<entry align="left" valign="top"><simpara>A string.</simpara></entry>
<entry align="left" valign="top"><simpara>The location of target package for MVC artifacts.  Default value is <literal>project</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>griffon.simplejpa.scaffolding.startupGroup</literal></simpara></entry>
<entry align="left" valign="top"><simpara>A string.</simpara></entry>
<entry align="left" valign="top"><simpara>The name of startup group.  If it is not defined, no startup group will be generated.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>griffon.simplejpa.scaffolding.ignoreLazy</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>true</literal> or <literal>false</literal>.</simpara></entry>
<entry align="left" valign="top"><simpara>If <literal>true</literal>, lazy attributes will be included in generated code.  Default value is <literal>true</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>griffon.simplejpa.scaffolding.forceOverwrite</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>true or `false</literal>.</simpara></entry>
<entry align="left" valign="top"><simpara>If <literal>true</literal>, existing files will be overwritten.  Default value is <literal>false</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>griffon.simplejpa.scaffolding.skipExcel</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>true</literal> or <literal>false</literal></simpara></entry>
<entry align="left" valign="top"><simpara>If <literal>true</literal>, not Excel file (for integration testing) will be created.  Default value is <literal>false</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>griffon.simplejpa.scaffolding.dateTimeStyle</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>'DEFAULT'</literal>, <literal>'SHORT'</literal>, <literal>'MEDIUM'</literal>, <literal>'LONG'</literal>, or <literal>'FULL'</literal>.</simpara></entry>
<entry align="left" valign="top"><simpara>Represent formatting styles for auditing properties that are instances of <literal>java.util.Date</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>griffon.simplejpa.scaffolding.target</literal></simpara></entry>
<entry align="left" valign="top"><simpara>A string that consists of domain class names or <literal>'*'</literal>.</simpara></entry>
<entry align="left" valign="top"><simpara>List of domain classes to generate.  If <literal>'*'</literal>, all domain classes will be generated.  Default value is <literal>'*'</literal>.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>For example, the configurations below:</simpara>
<formalpara>
<title>Config.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">griffon {
    simplejpa {
        scaffolding {
            generatedPackage = 'com.jocki.exercises'
            startupGroup = 'MainGroup'
            forceOverwrite = true
        }
    }
}</programlisting>
</para>
</formalpara>
<simpara>is identical with executing the following command:</simpara>
<literallayout class="monospaced">griffon generate-all -generatedPackage=com.jocki.exercises -startupGroup=MainGroup -forceOverwrite *</literallayout>
<simpara>Another benefit of storing <literal>generate-all</literal> parameters as configuration keys is automatic scaffolding.  The scaffolding
process can be automated if <literal>griffon.simplejpa.scaffolding.auto</literal> is set to <literal>true</literal>.  For example, this configuration will
automatically run scaffolding process:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">griffon {
    simplejpa {
        scaffolding {
            auto = true
            startupGroup = 'MainGroup'
        }
    }
}</programlisting>
<simpara>Automatic scaffolding will be performed whenever Griffon is compiling classes, such as when project is launched from
<literal>griffon run-app</literal> command.  Automatic scaffolding will not run in production when no class compilations being carried
out.</simpara>
<section xml:id="basic-generator">
<title>Basic Generator</title>
<simpara>Basic generator is the default generator used by simple-jpa.  It supports the following attribute types in
domain class:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Supported Attribute Types</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="33*"/>
<colspec colname="col_2" colwidth="33*"/>
<colspec colname="col_3" colwidth="33*"/>
<thead>
<row>
<entry align="left" valign="top">Attribute Type</entry>
<entry align="left" valign="top">SwingBuilder node</entry>
<entry align="left" valign="top">Class</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>String</literal>, <literal>Character</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>textField()</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>JTextField</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>Boolean</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>checkBox()</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>JCheckbox</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>Byte</literal>, <literal>Short</literal>, <literal>Integer</literal>, <literal>Long</literal>, <literal>Float</literal>, <literal>Double</literal>, <literal>BigInteger</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>numberTextField()</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>JFormattedTextField</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>BigDecimal</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>decimalTextField()</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>JFormattedTextField</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>DateTime</literal>, <literal>LocalDateTime</literal>, <literal>LocalDate</literal>, <literal>LocalTime</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>dateTimePicker()</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>DateTimePicker</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>Enum</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>comboBox()</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>JComboBox</literal> with <literal>EnumComboBoxModel</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>List</literal>, <literal>Set</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>button()</literal> if relation is one-to-many or <literal>tagChooser()</literal> if relation is many-to-many</simpara></entry>
<entry align="left" valign="top"><simpara><literal>JButton</literal> or <literal>TagChooser</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Any Entity Object</simpara></entry>
<entry align="left" valign="top"><simpara><literal>button()</literal> if relation is one-to-one or <literal>comboBox()</literal> if relation is one-to-many</simpara></entry>
<entry align="left" valign="top"><simpara><literal>JButton</literal> or <literal>JComboBox</literal></simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<warning>
<simpara>Basic generator doesn&#8217;t support native data types such as <literal>int</literal>, <literal>float</literal>, or <literal>double</literal> because they
are not nullable.</simpara>
</warning>
<tip>
<simpara>Basic generator will generate TODO comments in the generated code to provide information or warning to
 user.  It is safe to delete these TODO comments.</simpara>
</tip>
<simpara>For example, the following domain class:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">@DomainClass @Entity @Canonical
class Student {

    String name

    Integer age

    @Type(type = "org.jadira.usertype.dateandtime.joda.PersistentLocalDate")
    LocalDate birthDate

    Boolean registered

    @Enumerated
    GRADE grade

    @ManyToOne
    Teacher teacher

    @ManyToMany(cascade=CascadeType.ALL, fetch=FetchType.EAGER)
    List&lt;Classroom&gt; classrooms = []

}

enum GRADE {
    GRADE_1, GRADE_2, GRADE_3
}</programlisting>
<simpara>will be generated as:</simpara>
<figure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/generated_view_basic_attributes.PNG"/>
</imageobject>
<textobject><phrase>generated view basic attributes</phrase></textobject>
</mediaobject>
</figure>
<simpara>To create a new record, user should enter required values in the editing area and click the <emphasis>'Save&#8217;</emphasis> button.</simpara>
<simpara>To update existing record, user must first select a row in table, enter the updated values in the editing area, and
click the <emphasis>'Save&#8217;</emphasis> button.</simpara>
<simpara>To remove record from database, user must click the <emphasis>'Delete&#8217;</emphasis> button that will appear if table&#8217;s row is selected.</simpara>
<simpara>For domain class that have one-to-one association, basic generator generates a dialog to
create, edit or remove the related entity.  This feature requires cascading to be activated for the attribute.</simpara>
<simpara>For example, the following attribute declaration:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">@OneToOne(cascade=CascadeType.ALL, orphanRemoval=true)
Teacher teacher</programlisting>
<simpara>is represented by <literal>JButton</literal> that if clicked will open a dialog that allows user to modify the related
 <literal>Teacher</literal>.
 If this button is clicked in create operation, the dialog can be used to create a new instance of <literal>Teacher</literal> entity:</simpara>
<figure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/generated_view_one_to_one.png"/>
</imageobject>
<textobject><phrase>generated view one to one</phrase></textobject>
</mediaobject>
</figure>
<simpara>If this button is clicked in update operation, the dialog can be used to update or delete existing <literal>Teacher</literal> entity:</simpara>
<figure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/generated_view_one_to_one_update.png"/>
</imageobject>
<textobject><phrase>generated view one to one update</phrase></textobject>
</mediaobject>
</figure>
<simpara>The naming convention for one-to-one MVC group and its artifact&#8217;s name is the target entity name
with <emphasis>'AsPair&#8217;</emphasis>  as suffix.  For example, if target entity is <literal>Teacher</literal>, basic generator generates
<literal>TeacherAsPairModel</literal>, <literal>TeacherAsPairView</literal>, and <literal>TeacherAsPairController</literal>.  They are not to be confused with the
standalone MVC group for <literal>Teacher</literal> such as <literal>TeacherModel</literal>, <literal>TeacherView</literal>, and <literal>TeacherController</literal> that may also exists
in the project (for example they are used for displaying list of <literal>Teacher</literal> in their own screen and <emphasis role="strong">not</emphasis> as popup).</simpara>
<important>
<simpara>If the annotated attribute in the generated code doesn&#8217;t have <literal>cascade</literal> set to <literal>CascadeType.ALL</literal>,
<literal>org.hibernate.TransientPropertyValueException</literal> will be raised when saving the entity.  To fix this, either add a
proper cascading to object mapping or change the generated code to make it work without cascading.</simpara>
</important>
<simpara>Basic generator also treats <literal>@Embedded</literal> attributes as equivalent of one-to-one attributes.  For example, the
following mapping generates the same view as the previous one:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">@Embedded
Teacher teacher</programlisting>
<tip>
<simpara>User can press ESC button as a shortcut to close popup dialog.</simpara>
</tip>
<tip>
<simpara>User can press Enter or double click a selected row in table to display the first one-to-many or one-to-one
popup dialog in the view.</simpara>
</tip>
<simpara>For one-to-many associations, basic generator also generates a dialog.  For example, the following attribute
declaration:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">@OneToMany(cascade=CascadeType.ALL, orphanRemoval=true, fetch=FetchType.EAGER)
Set&lt;Classroom&gt; classrooms = new HashSet&lt;&gt;()</programlisting>
<simpara>is represented by <literal>JButton</literal> that if clicked will open a dialog that allows user to add or remove the list of
<literal>Classroom</literal> entities that are associated with current entity. If this button is clicked in create operation, the
dialog can be used to populate the collection with one or more <literal>Classroom</literal>:</simpara>
<figure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/generated_view_one_to_many.png"/>
</imageobject>
<textobject><phrase>generated view one to many</phrase></textobject>
</mediaobject>
</figure>
<simpara>If this button is clicked in update operation, the dialog can be used to add new entity to the collection, edit
the value of entity in the collection, or remove an entity from the collection:</simpara>
<figure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/generated_view_one_to_many_update.png"/>
</imageobject>
<textobject><phrase>generated view one to many update</phrase></textobject>
</mediaobject>
</figure>
<simpara>The naming convention for one-to-many attribute is the target entity name with <emphasis>'AsChild&#8217;</emphasis>  as suffix.  For example, if
target entity is <literal>Classroom</literal>, basic generator generates <literal>ClassroomAsChildModel</literal>, <literal>ClassroomAsChildView</literal>, and
<literal>ClassroomAsChildController</literal>.  This is not to be confused with <literal>ClassroomModel</literal>, <literal>ClassroomView</literal> or
<literal>ClassroomController</literal> that may also exists in the project.</simpara>
<simpara>Basic generator will also treat <literal>@ElementCollection</literal> attributes as equivalent of one-to-many attributes. For
example, the following mapping creates the same view as the previous one:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">@ElementCollection(fetch=FetchType.EAGER)
Set&lt;Classroom&gt; classrooms = new HashSet&lt;&gt;()</programlisting>
<simpara>For bidirectional associations, basic generator generates inverse attributes as labels because they are not editable.
 For example, the following domain classes:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">@DomainClass @Entity @Canonical
class Invoice {

    String number

    @OneToOne(cascade=CascadeType.ALL, orphanRemoval=true)
    Delivery delivery

}

@DomainClass @Entity @Canonical(excludes='invoice')
class Delivery {

    String ticketNumber

    @OneToOne(mappedBy='delivery')
    Invoice invoice

}</programlisting>
<simpara>will be generated as:</simpara>
<figure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/generated_view_one_to_one_bidirectional.png"/>
</imageobject>
<textobject><phrase>generated view one to one bidirectional</phrase></textobject>
</mediaobject>
</figure>
<tip>
<simpara>Don&#8217;t forget to add <literal>excludes</literal> to <literal>@Canonical</literal> in bidirectional association to avoid infinitive recursion!</simpara>
</tip>
</section>
<section xml:id="ddd-generator">
<title>DDD Generator</title>
<simpara>simple-jpa also shipped with a DDD generator that can selected by using <literal>-generator</literal> parameter such as in the following
execution:</simpara>
<literallayout class="monospaced">griffon generate-all -generator=simplejpa.scaffolding.generator.ddd.DDDGenerator *</literallayout>
<simpara>DDD generator rely on basic generator to perform most of its works.  It generates views that are identical to those
generated by basic generator.  The only distinction is this generator will move JPA related methods and database
transactions from controller into a separate repository.</simpara>
<simpara>For every <literal>@Entity</literal> annotated domain classes, DDD generator will create their corresponding repository classes.
simple-jpa supports a custom Griffon&#8217;s artifact called <literal>repository</literal>.  For example, if there is an entity called
<literal>Student</literal>, DDD generator will create a new repository called <literal>StudentRepository</literal> in <literal>griffon-app/repositories</literal>.  This
artifact is a singleton.  It is automatically injected into controller (and other Griffon&#8217;s artifacts) by defining
a variable such as <literal>studentRepository</literal>.</simpara>
<simpara>To retrieve all repositories, use <literal>RepositoryManager.getRepositories()</literal> such as:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">def repositories = SimpleJpaUtil.instance.repositoryManager.repositories
println "All repositories: $repositories"</programlisting>
<simpara>Repository artifact is lazy initialized.  This means it won&#8217;t be created if it is not used.  <literal>RepositoryManager.findRepository()</literal>
can be used to retrieve an instance of repository.  This method will create a new instance that will be reused later (singleton)
when it is called for the first time.</simpara>
<programlisting language="groovy" linenumbering="unnumbered">InvoiceRepository repository = SimpleJpaUtil.instance.repositoryManager.findRepository('Invoice')</programlisting>
<simpara>DDD generator disables dynamic methods in controller and adds dynamic methods to repository by adding the following line to <literal>Config.groovy</literal>:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">griffon.simplejpa.finders.injectInto = ['repository']</programlisting>
</section>
<section xml:id="customization">
<title>Customization</title>
<simpara>A generator usually has classes and multiple templates.  Reusable logic for view generation is stored in
classes.  They will be invoked by templates.  For example, the generator class is always available to template as <literal>g</literal>
variable.</simpara>
<simpara>The easiest way to customize a generator is to modify its template. <literal>install-templates</literal> command can be used to
install templates for simple-jpa built-in generator to current project:</simpara>
<literallayout class="monospaced">griffon install-templates</literallayout>
<simpara>The command will copy template files to <literal>src/templates/artifacts</literal>.  The following is list of all template files used by
simple-jpa built-in generators:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Template Files</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="33*"/>
<colspec colname="col_2" colwidth="33*"/>
<colspec colname="col_3" colwidth="33*"/>
<thead>
<row>
<entry align="left" valign="top">Name</entry>
<entry align="left" valign="top">Generator</entry>
<entry align="left" valign="top">Purpose</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>SimpleJpaDomainClass.groovy</literal></simpara></entry>
<entry align="left" valign="top"><simpara>create-domain-class</simpara></entry>
<entry align="left" valign="top"><simpara>Domain class generation</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>SimpleJpaRepository.groovy</literal></simpara></entry>
<entry align="left" valign="top"><simpara>DDD</simpara></entry>
<entry align="left" valign="top"><simpara>Repository for entity</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>StartupModel.groovy</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Basic, DDD</simpara></entry>
<entry align="left" valign="top"><simpara>Startup group&#8217;s model</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>StartupController.groovy</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Basic, DDD</simpara></entry>
<entry align="left" valign="top"><simpara>Startup group&#8217;s controller</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>StartupView.groovy</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Basic, DDD</simpara></entry>
<entry align="left" valign="top"><simpara>Startup group&#8217;s view</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>SimpleJpaModel.groovy</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Basic, DDD</simpara></entry>
<entry align="left" valign="top"><simpara>Domain-class based model</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>SimpleJpaView.groovy</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Basic, DDD</simpara></entry>
<entry align="left" valign="top"><simpara>Domain-class based view</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>SimpleJpaController.groovy</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Basic</simpara></entry>
<entry align="left" valign="top"><simpara>Domain-class based controller</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>SimpleJpaDDDController.groovy</literal></simpara></entry>
<entry align="left" valign="top"><simpara>DDD</simpara></entry>
<entry align="left" valign="top"><simpara>Domain-class based controller</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>SimpleJpaIntegrationTest.groovy</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Basic, DDD</simpara></entry>
<entry align="left" valign="top"><simpara>Integration test case</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>SimpleJpaPairModel.groovy</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Basic, DDD</simpara></entry>
<entry align="left" valign="top"><simpara>one-to-one popup model</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>SimpleJpaPairView.groovy</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Basic, DDD</simpara></entry>
<entry align="left" valign="top"><simpara>one-to-one popup view</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>SimpleJpaPairController.groovy</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Basic</simpara></entry>
<entry align="left" valign="top"><simpara>one-to-one popup controller</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>SimpleJpaDDDPairController.groovy</literal></simpara></entry>
<entry align="left" valign="top"><simpara>DDD</simpara></entry>
<entry align="left" valign="top"><simpara>one-to-one popup controller</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>SimpleJpaChildModel.groovy</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Basic, DDD</simpara></entry>
<entry align="left" valign="top"><simpara>one-to-many popup model</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>SimpleJpaChildView.groovy</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Basic, DDD</simpara></entry>
<entry align="left" valign="top"><simpara>one-to-many popup view</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>SimpleJpaChildController.groovy</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Basic</simpara></entry>
<entry align="left" valign="top"><simpara>one-to-many popup controller</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>SimpleJpaDDDChildController.groovy</literal></simpara></entry>
<entry align="left" valign="top"><simpara>DDD</simpara></entry>
<entry align="left" valign="top"><simpara>one-to-many popup controller</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>After these templates have been installed into current project, the next invocation of <literal>generate-all</literal> will be based on
them.</simpara>
<simpara>For a more complex customization, a new generator may be created.  The new generator can be extended from existing
generator or <literal>simplejpa.scaffolding.generator.Generator</literal>. All generators have the following important methods:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>generate(DomainClass domainClass)</literal> will be invoked when generating files for individual domain class.</simpara>
</listitem>
<listitem>
<simpara><literal>generateStartupGroup(Map&lt;String,DomainClass&gt; domainClasses)</literal> will be invoked when generating startup group.</simpara>
</listitem>
<listitem>
<simpara><literal>generateExtra(Map&lt;String,DomainClass&gt; domainClasses)</literal> is an optional method that will be invoked after generating
files for individual domain class.</simpara>
</listitem>
</itemizedlist>
<simpara>For example, the following is a sample declaration of custom generator that does nothing:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">package generator

import simplejpa.scaffolding.DomainClass
import simplejpa.scaffolding.Scaffolding
import simplejpa.scaffolding.generator.basic.BasicGenerator

class MyGenerator extends BasicGenerator {

    MyGenerator(Scaffolding scaffolding) {
        super(scaffolding)
    }

    @Override
    void generate(DomainClass domainClass) {
        println "Generating ${domainClass.name}"
        // call super.generate(domainClass) for default operation (generating MVC artifacts)
    }

    @Override
    void generateStartupGroup(Map&lt;String, DomainClass&gt; domainClasses) {
        println "Generating startup group..."
    }

    @Override
    void generateExtra(Map&lt;String, DomainClass&gt; domainClasses) {
        println "Generating extra..."
    }

}</programlisting>
<simpara>The following command will use the custom generator:</simpara>
<literallayout class="monospaced">griffon -generator=generator.MyGenerator *</literallayout>
</section>
</section>
<section xml:id="validation">
<title>Validation</title>
<simpara>simple-jpa uses Bean Validation API (JSR 303) for validation.  By default, it uses Hibernate Validator as Bean Validation
 API implementation.  The following are some of common annotations supported by Hibernate Validator:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Bean Validation Constraints</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="25*"/>
<colspec colname="col_2" colwidth="75*"/>
<thead>
<row>
<entry align="left" valign="top">Annotation</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>@NotNull</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Checks that the annotated value is not null</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>@NotBlank</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Checks that the annotated character sequence is not null and the trimmed length is greater than 0.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>@NotEmpty</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Can be used for Collection to check whether the annotated element is not null or empty.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>@Size(min,max)</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Checks if the annotated element&#8217;s size is between min and max (inclusive).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>@Max(value)</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Checks whether the annotated value is less than or equal to the specified maximum.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>@Min(value)</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Checks whether the annotated value is higher than or equal to the specified minimum.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>These annotations can be added to properties of domain class, for example:</simpara>
<formalpara>
<title>Invoice.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">@Canonical(excludes='lineItems')
class Invoice {

    @NotBlank @Size(min=10, max=10)
    String number

    @NotNull @Type(type="org.jadira.usertype.dateandtime.joda.PersistentLocalDate")
    LocalDate date

    @ElementCollection @OrderColumn @NotEmpty
    List&lt;ItemFaktur&gt; lineItems = []

}</programlisting>
</para>
</formalpara>
<section xml:id="validation-method">
<title>Validation Method</title>
<simpara>You can use <literal>validate()</literal> method from injection enhanced artifact to validate an object.  The first argument for this
 method is an object that will be validated.  It is the only required argument.  <literal>validate()</literal> returns <literal>true</literal> if requested
 object is successfully validated or <literal>false</literal> if it failed.</simpara>
<simpara>For example, the following code will print error message to console if invoice object is not valid:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">// The following code assumes that controller is injection enhanced.
// You can also choose to enabled injection to other artifact such as repository.
if (controller.validate(invoice)) {
   println "invoice is valid."
} else {
   println "invoice is not valid."
}</programlisting>
<simpara>The second parameter for <literal>validate()</literal> determine what validation group is in effect.  The default value is <literal>Default</literal> group.
To use a different group, you can pass the group class to <literal>validate()</literal>, for example:</simpara>
<formalpara>
<title>Invoice.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">@Canonical(excludes='lineItems')
class Invoice {

    @NotBlank(groups=[FirstStep,SecondStep])
    @Size(min=10, max=10, groups=[FirstStep,SecondStep])
    String number

    @NotNull(groups=[FirstStep,SecondStep])
    @Type(type="org.jadira.usertype.dateandtime.joda.PersistentLocalDate")
    LocalDate date

    @ElementCollection @OrderColumn @NotEmpty(groups=[SecondStep])
    List&lt;ItemFaktur&gt; lineItems = []

}</programlisting>
</para>
</formalpara>
<programlisting language="groovy" linenumbering="unnumbered">// empty line items is acceptable and treated as valid
if (!controller.validate(invoice, FirstStep)) {
    println "first step validation for invoice is not valid!"
}

// now, empty line items is not valid
if (!controller.validate(invoice, SecondStep)) {
   println "second step validation for invoice is not valid!"
}</programlisting>
<simpara>The third parameter accepts an instance of view model (Griffon&#8217;s model).  Use this to present error in presentation
 layer by highlighting related view&#8217;s component.  See the next section for more information about error notification.</simpara>
</section>
<section xml:id="notification-in-view">
<title>Notification In View</title>
<simpara>To help you in displaying information about failed validation, simple-jpa injects the following members to all view
models (model in MVC group):</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Validation Members Available in View Model</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Members Declaration</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>def errors = new ConcurrentHashMap()</literal></simpara></entry>
<entry align="left" valign="top"><simpara>This is a bindable map that stores validation messages.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>boolean hasError()</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Return <literal>true</literal> if <literal>errors</literal> is not empty.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>All builder&#8217;s nodes also has a special <literal>errorPath</literal> attribute that can be used to represent associated validation path
(like property name of validated objects).  If <literal>errors</literal> contains key equals to <literal>errorPath</literal>, the respective
 component will be highlighted.</simpara>
<simpara>For example, the following code will highlight the first <literal>JTextField</literal>:</simpara>
<formalpara>
<title>MyView.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">application(pack: true) {
    flowLayout()
    textField(columns: 20, errorPath: 'firstName')
    textField(columns: 20, errorPath: 'lastName')
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>MyController.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">class MyController {

    def model
    def view

    void mvcGroupInit(Map args) {
       model.errors['firstName'] = 'First name is not valid!'
    }

}</programlisting>
</para>
</formalpara>
<figure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/highlight_component_on_error.PNG"/>
</imageobject>
<textobject><phrase>highlight component on error</phrase></textobject>
</mediaobject>
</figure>
<simpara>When you start typing on the highlighted <literal>JTextField</literal>, its red background will disappear.  This also remove existing
 entry in <literal>model.errors</literal>.</simpara>
<simpara>By default, simple-jpa use red background to notify failed validation.  You can also create your own notification method by
 extending <literal>ErrorNotification</literal>.  For example, the following implementation of <literal>ErrorNotification</literal> will highlight
 border on error:</simpara>
<formalpara>
<title>MyErrorNotification.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">package main

import java.awt.Color
import javax.swing.*
import javax.swing.border.*
import simplejpa.validation.*

class MyErrorNotification extends ErrorNotification {

  Border highlightBorder = BorderFactory.createLineBorder(Color.RED)
  Border normalBorder

  public MyErrorNotification(JComponent node, ObservableMap errors, String errorPath) {
    super(node, errors, errorPath)
    normalBorder = node.getBorder()
  }

  void performNotification() {
    if (errors[errorPath]) {
      node.setBorder(highlightBorder)
    } else {
      node.setBorder(normalBorder)
    }
  }

}</programlisting>
</para>
</formalpara>
<simpara>To assign <literal>MyErrorNotification</literal> to a single component, you can use <literal>errorNotification</literal> attribute:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">textField(columns: 20, errorPath: 'firstName', errorNotification: main.MyErrorNotification)</programlisting>
<figure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/border_component_on_error.PNG"/>
</imageobject>
<textobject><phrase>border component on error</phrase></textobject>
</mediaobject>
</figure>
<simpara>To use <literal>MyErrorNotification</literal> on all components, add the following line to <literal>Config.groovy</literal>:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">griffon.simplejpa.validation.defaultErrorNotificationClass = 'main.MyErrorNotification'</programlisting>
<simpara>The component responsible for removing error message is called <literal>ErrorCleaner</literal>.  The following table lists all
  implementations of <literal>ErrorCleaner</literal> by default:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Default Implementation of ErrorCleaner</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="33*"/>
<colspec colname="col_2" colwidth="33*"/>
<colspec colname="col_3" colwidth="33*"/>
<thead>
<row>
<entry align="left" valign="top">Component</entry>
<entry align="left" valign="top">Implementation</entry>
<entry align="left" valign="top">Activation Condition</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>JTextField</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>JTextFieldErrorCleaner</literal></simpara></entry>
<entry align="left" valign="top"><simpara>When user typed in text box.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>JComboBox</literal>, <literal>JCheckBox</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>JComboBoxErrorCleaner</literal></simpara></entry>
<entry align="left" valign="top"><simpara>When user changed selection.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>JButton</literal>, <literal>JRadioButton</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>JRadioButton</literal></simpara></entry>
<entry align="left" valign="top"><simpara>When user clicked the button.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>JXDatePicker</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>JXDatePickerErrorCleaner</literal></simpara></entry>
<entry align="left" valign="top"><simpara>When user changes date.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>simplejpa.swing.DateTimePicker</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>DateTimePickerErrorCleaner</literal></simpara></entry>
<entry align="left" valign="top"><simpara>When user changes selection.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>simplejpa.swing.TagChooser</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>TagChooserErrorCleaner</literal></simpara></entry>
<entry align="left" valign="top"><simpara>When user changes selection.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>You can create your own implementation by creating a new class that implements <literal>ErrorCleaner</literal>.  For example, the following
  implementation removes error notification after one second:</simpara>
<formalpara>
<title>MyErrorCleaner.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">package main

import simplejpa.validation.*
import javax.swing.*
import java.awt.event.ActionListener

class MyErrorCleaner implements ErrorCleaner {

    void addErrorCleaning(JComponent component, ObservableMap errors, String errorPath) {
        new Timer(1000, {
            errors.remove(errorPath)
        } as ActionListener).start()
    }

}</programlisting>
</para>
</formalpara>
<simpara>To register this <literal>ErrorCleaner</literal> for all <literal>JTextField</literal>, you can add the following line to <literal>Config.groovy</literal>:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">griffon.simplejpa.validation.errorCleaners = [
  'javax.swing.JTextField': 'main.MyErrorCleaner'
]</programlisting>
<simpara>If you want to apply the new <literal>ErrorCleaner</literal> to all components, use <literal>'*'</literal> instead of <literal>'javax.swing.JTextField</literal> as key:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">griffon.simplejpa.validation.errorCleaners = [
  '*': 'main.MyErrorCleaner'
]</programlisting>
</section>
<section xml:id="validation-message">
<title>Validation Message</title>
<simpara>If validation is failed, simple-jpa stores validation message for the failed paths in <literal>model.errors</literal>.  You can use values
 stored in <literal>model.errors</literal> to determine which paths have been failed and what are their corresponding messages. You can
 also change the default validation message by editing <literal>griffon-app\i18n\ValidationMessage.properties</literal>.</simpara>
<simpara>The following code shows how to retrieve validation messages:</simpara>
<formalpara>
<title>MyModel.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">import groovy.beans.Bindable
import org.hibernate.validator.constraints.NotBlank

class MyModel {

   @NotBlank String firstName

   String lastName

}</programlisting>
</para>
</formalpara>
<formalpara>
<title>MyView.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">application(pack: true) {
    flowLayout()
    textField(columns: 20, text: bind('firstName', target: model), errorPath: 'firstName')
    textField(columns: 20, text: bind('lastName', target: model), errorPath: 'lastName')
    button('Save', actionPerformed: controller.save)
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>MyController.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">class MyController {

    def model
    def view

    def save = {
        if (validate(model)) {
            println 'Your input have been validated and passed.'
        } else {
            println 'Validation failed!'
            model.errors.each { k, v -&gt;
                println "$k $v"
            }
            // This will display the following error message
            // if first name is blank:
            //
            // Validation failed!
            // firstName may not be empty
            //
        }
    }

}</programlisting>
</para>
</formalpara>
<simpara>If you want to display validation mesage as <literal>JLabel</literal> in view, you can use <literal>errorLabel()</literal> node.  For example, you can
 change the previous view into:</simpara>
<formalpara>
<title>MyView.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">application(pack: true) {
    flowLayout()
    textField(columns: 20, text: bind('firstName', target: model), errorPath: 'firstName')
    errorLabel(path: 'firstName')
    textField(columns: 20, text: bind('lastName', target: model), errorPath: 'lastName')
    errorLabel(path: 'lastName')
    button('Save', actionPerformed: controller.save)
}</programlisting>
</para>
</formalpara>
<figure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/error_label.PNG"/>
</imageobject>
<textobject><phrase>error label</phrase></textobject>
</mediaobject>
</figure>
<simpara><literal>errorLabel()</literal> is only visible if <literal>model.errors</literal> contains a key equals to its <literal>errorPath</literal>.</simpara>
</section>
<section xml:id="miscellaneous">
<title>Miscellaneous</title>
<simpara>In some cases, validation may be failed because <literal>JTextField</literal> value in model is an empty <literal>String</literal> rather than null
value. To ensure consistent behaviour, simple-jpa can be configured to translate all empty <literal>String</literal> into null value
before performing validation. This feature is disabled by default. To enable it, add the following line to <literal>Config.groovy</literal>:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">griffon.simplejpa.validation.convertEmptyStringToNull = true</programlisting>
</section>
</section>
<section xml:id="view">
<title>View</title>
<simpara>To assist you in building presentation layer, simple-jpa provides several custom nodes that are typically
used in business application.  They can only be used if your presentation layer is Swing based and you are using
Groovy&#8217;s SwingBuilder (default in Griffon).</simpara>
<section xml:id="custom-text-fields">
<title>Custom Text Fields</title>
<simpara>Use <literal>numberTextField()</literal> to bind text component with numeric property in view model.  For example:</simpara>
<formalpara>
<title>MyModel.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">class MyModel {

   @Bindable Long amount

}</programlisting>
</para>
</formalpara>
<formalpara>
<title>MyView.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">application(pack: true) {
    flowLayout()
    numberTextField(columns: 20, bindTo: 'amount')
    button('Process', actionPerformed: { println model.amount })
}</programlisting>
</para>
</formalpara>
<simpara>If you want to bind to a <literal>BigDecimal</literal> property in view model, you need to use <literal>decimalTextField()</literal>.  For example:</simpara>
<formalpara>
<title>MyModel.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">class MyModel {

   @Bindable Long amount

}</programlisting>
</para>
</formalpara>
<formalpara>
<title>MyView.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">application(pack: true) {
    flowLayout()
    decimalTextField(columns: 20, bindTo: 'amount')
    button('Process', actionPerformed: { println model.amount })
}</programlisting>
</para>
</formalpara>
<simpara>Both <literal>numberTextField()</literal> and <literal>decimalTextField()</literal> generates a <literal>JFormattedTextField</literal>.  The default formatter used by
 them is <literal>DecimalFormat.getNumberInstance()</literal>.  You can use different formatter by using one of <literal>'currency'</literal>, <literal>'percent'</literal>,
  or <literal>'integer'</literal> as value for <literal>type</literal> attribute.  For example:</simpara>
<formalpara>
<title>MyView.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">application(pack: true) {
    flowLayout()
    label('Default')
    decimalTextField(columns: 20, bindTo: 'amount')
    label('Currency')
    decimalTextField(columns: 20, bindTo: 'amount', type: 'currency')
    label('Percent')
    decimalTextField(columns: 20, bindTo: 'amount', type: 'percent')
    label('Integer')
    decimalTextField(columns: 20, bindTo: 'amount', type: 'integer')
    button('Process', actionPerformed: { println model.amount })
}</programlisting>
</para>
</formalpara>
<figure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/number_format.PNG"/>
</imageobject>
<textobject><phrase>number format</phrase></textobject>
</mediaobject>
</figure>
<simpara>You can also change the property of current formatter by using attribute name that starts with <literal>nf</literal> and followed by
formatter&#8217;s property name, for example:</simpara>
<formalpara>
<title>MyView.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">application(pack: true) {
    flowLayout()
    label('Default')
    decimalTextField(columns: 20, bindTo: 'amount')
    label('Custom Formatter')
    decimalTextField(columns: 20, bindTo: 'amount',
      nfMinimumFractionDigits: 3, nfMinimumIntegerDigits: 5)
    button('Process', actionPerformed: { println model.amount })
}</programlisting>
</para>
</formalpara>
<figure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/custom_formatter.PNG"/>
</imageobject>
<textobject><phrase>custom formatter</phrase></textobject>
</mediaobject>
</figure>
<simpara>If you want a <literal>MaskFormatter</literal>, you can use <literal>maskTextField()</literal>:</simpara>
<formalpara>
<title>MyView.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">application(pack: true) {
    flowLayout()
    label('Default')
    maskTextField(columns: 20, mask: 'AAA-#####-##', bindTo: 'identifier')
    button('Process', actionPerformed: { println model.identifier })
}</programlisting>
</para>
</formalpara>
<figure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/mask_text_field.PNG"/>
</imageobject>
<textobject><phrase>mask text field</phrase></textobject>
</mediaobject>
</figure>
<simpara>In the sample above, mask <literal>'AAA-####-##'</literal> allows user to input number of letter for the first three characters.  The rests
 should be number.</simpara>
</section>
<section xml:id="date-time-picker">
<title>Date Time Picker</title>
<simpara>You can use <literal>dateTimePicker()</literal> to allow user to input date or time (or both).  This component should be binded to date
data type from Joda Time library.  If you don&#8217;t need time input or binding to property that uses Joda Time type, you can
just use <literal>JXDatePicker</literal> from SwingX instead of this component.</simpara>
<simpara><literal>dateVisible</literal> or <literal>timeVisible</literal> of this component determine which input is visible.  By default, both values are <literal>true</literal>.</simpara>
<formalpara>
<title>MyView.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">application(pack: true) {
    flowLayout()
    label('Date Only: ')
    dateTimePicker(dateVisible: true, timeVisible: false)
    label('Time Only:')
    dateTimePicker(dateVisible: false, timeVisible: true)
    label('Both:')
    dateTimePicker()
}</programlisting>
</para>
</formalpara>
<figure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/date_time_picker.PNG"/>
</imageobject>
<textobject><phrase>date time picker</phrase></textobject>
</mediaobject>
</figure>
<simpara><literal>dateTimePicker()</literal> offers several bindable properties:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Bindable Properties In <literal>dateTimePicker()</literal></title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Property Name</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>localDate</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Current value as <literal>LocalDate</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>localDateTime</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Current value as <literal>LocalDateTime</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>dateTime</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Current value as <literal>DateTime</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>dateMidnight</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Current value as <literal>DateMidnight</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>localTime</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Current value as <literal>LocalTime</literal>.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>In most cases, you will need only one of those properties, but you can also bind to multiple properties to get the same
 value in different types:</simpara>
<formalpara>
<title>MyModel.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">import org.joda.time.*

class MyModel {

   @Bindable LocalDate myLocalDate
   @Bindable LocalDateTime myLocalDateTime
   @Bindable DateMidnight myDateMidnight

}</programlisting>
</para>
</formalpara>
<formalpara>
<title>MyView.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">application(pack: true) {
    flowLayout()
    dateTimePicker(
      localDate: bind('myLocalDate', target: model),
      localDateTime: bind('myLocalDateTime', target: model),
      dateMidnight: bind('myDateMidnight', target: model)
    )
    label('myLocalDate is ')
    label(text: bind {model.myLocalDate})
    label('myLocalDateTime is ')
    label(text: bind {model.myLocalDateTime})
    label('myDateMidnight is ')
    label(text: bind {model.myDateMidnight})
}</programlisting>
</para>
</formalpara>
<figure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/date_time_picker_binding.PNG"/>
</imageobject>
<textobject><phrase>date time picker binding</phrase></textobject>
</mediaobject>
</figure>
<simpara><literal>dateTimePicker()</literal> internally uses <literal>JXDatePicker</literal> for date entry and <literal>JSpinner</literal> time entry.  They are exposed as properties
 called <literal>datePicker</literal> and <literal>timeSpinner</literal>.</simpara>
<simpara>If you want to perform a code everytime date or time is changed, you can add a closure to <literal>selectedValueChanged</literal> property:</simpara>
<formalpara>
<title>MyView.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">application(pack: true) {
    flowLayout()
    dateTimePicker(
      localDateTime: bind('myLocalDateTime', target: model),
      selectedValueChanged: {
          println "Current value is ${model.myLocalDateTime.toString('dd-MM-YYYY hh:mm')}"
      }
    )
}</programlisting>
</para>
</formalpara>
</section>
<section xml:id="table">
<title>Table</title>
<simpara>Table is one of the most important components in business application.  That is why simple-jpa provides its own custom
<literal>JTable</literal> called <literal>glazedTable()</literal>.  It is designed to be binded to <literal>EventList</literal> from Glazed Lists library.  If you don&#8217;t use
Glazed Lists, you can just use the default <literal>table()</literal> instead of <literal>glazedTable()</literal>.</simpara>
<simpara><literal>glazedTable()</literal> should contains one or more <literal>glazedColumn()</literal> to represent every columns in table.  Every <literal>glazedColumn()</literal>
will display property or execute method of the object contained in the binded <literal>EventList</literal>.</simpara>
<simpara>For example, lets assume you have created the following domain classes:</simpara>
<formalpara>
<title>Invoice.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">package domain

// import statements...

@DomainClass @Entity @Canonical
class Invoice {

	@NotEmpty @Size(min=5, max=5)
	String number


	@NotNull @Type(type="org.jadira.usertype.dateandtime.joda.PersistentLocalDate")
	LocalDate date

	@ElementCollection @OrderColumn @NotEmpty
	List&lt;LineItem&gt; items = []

	void add(LineItem item) {
		items &lt;&lt; item
	}

	BigDecimal total() {
		items.sum { it.total() }
	}

}</programlisting>
</para>
</formalpara>
<formalpara>
<title>LineItem.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">package domain

// import statements...

@Embeddable @Canonical
class LineItem {

	@NotEmpty @Size(min=2, max=50)
	String name

	@NotNull @Min(0l)
	BigDecimal price

	@NotNull @Min(1l)
	BigDecimal qty

	BigDecimal total() {
		price * qty
	}

}</programlisting>
</para>
</formalpara>
<simpara>A very simple use case of <literal>glazedTable()</literal> will be:</simpara>
<formalpara>
<title>MyModel.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">import org.joda.time.*
import ca.odell.glazedlists.BasicEventList

class MyModel {

   BasicEventList myTable = new BasicEventList()

}</programlisting>
</para>
</formalpara>
<formalpara>
<title>MyController.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">import domain.*
import org.joda.time.*

class MyController {

    def model
    def view

    void mvcGroupInit(Map args) {
        Invoice invoice1 = new Invoice('INV01', LocalDate.parse('2015-01-01'))
        invoice1.add(new LineItem('Product1', 100, 1))
        invoice1.add(new LineItem('Product2', 200, 2))

        Invoice invoice2 = new Invoice('INV02', LocalDate.parse('2015-01-02'))
        invoice2.add(new LineItem('Product3', 300, 3))
        invoice2.add(new LineItem('Product4', 400, 4))

        execInsideUISync {
            model.myTable &lt;&lt; invoice1
            model.myTable &lt;&lt; invoice2
        }
    }

}</programlisting>
</para>
</formalpara>
<formalpara>
<title>MyView.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">application(pack: true) {
    borderLayout()
    scrollPane(constraints: CENTER) {
      glazedTable(list: model.myTable) {
        glazedColumn(name: 'Invoice Number', property: 'number')
        glazedColumn(name: 'Date', property: 'date')
      }
    }
}</programlisting>
</para>
</formalpara>
<figure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/simple_glazed_table.PNG"/>
</imageobject>
<textobject><phrase>simple glazed table</phrase></textobject>
</mediaobject>
</figure>
<simpara>As you can see, <literal>name</literal> attribute of <literal>glazedColumn()</literal> set column&#8217;s caption and <literal>property</literal> attribute determine the
column&#8217;s value.  The following table lists all attributes for <literal>glazedColumn()</literal>:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Attributes for <literal>glazedColumn()</literal></title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Name</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>name</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Set column caption.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>expression</literal> or <literal>exp</literal></simpara></entry>
<entry align="left" valign="top"><simpara>A closure that will be executed to evaluate every row in this column.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>property</literal></simpara></entry>
<entry align="left" valign="top"><simpara>A string to represent property that will be displayed for every row in this column.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>columnClass</literal></simpara></entry>
<entry align="left" valign="top"><simpara>A <literal>Class</literal> to represent the columns&#8217; class.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>comparator</literal></simpara></entry>
<entry align="left" valign="top"><simpara>A <literal>Comparator</literal> to determine how sorting was done for this column.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>visible</literal></simpara></entry>
<entry align="left" valign="top"><simpara>A boolean value to determine if this column should be displayed or not.  This attribute is bindable.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara><literal>glazedColumn()</literal> is an instance of <literal>TableColumn</literal>.  This means you can also set all of <literal>TableColumn</literal> public properties
such as <literal>modelIndex</literal>, <literal>width</literal>, <literal>cellEditor</literal>, and <literal>cellRenderer</literal> in <literal>glazedColumn()</literal>.</simpara>
<simpara>To retrieve column&#8217;s value based on custom calculation rather than property name, you can set a closure for <literal>expression</literal>
attribute.  You can also use short name <literal>exp</literal> instead of <literal>expression</literal>.  Inside this closure, <literal>it</literal> refer to the object
 for current row.</simpara>
<simpara>For example, you can add third column which values are retrieved from <literal>Invoice.total()</literal> method:</simpara>
<formalpara>
<title>MyView.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">application(pack: true) {
    borderLayout()
    scrollPane(constraints: CENTER) {
      glazedTable(list: model.myTable) {
        glazedColumn(name: 'Invoice Number', property: 'number')
        glazedColumn(name: 'Date', property: 'date')
        glazedColumn(name: 'Total', exp: { it.total() })
      }
    }
}</programlisting>
</para>
</formalpara>
<figure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/glazed_column_expression.PNG"/>
</imageobject>
<textobject><phrase>glazed column expression</phrase></textobject>
</mediaobject>
</figure>
<simpara>You can change the size of a column by using its <literal>width</literal> property.  If you pass a number to <literal>width</literal>, it will set <literal>minWidth</literal>,
 <literal>preferredWidth</literal> and <literal>maxWidth</literal> of current <literal>TableColumn</literal> to the same value.  This means user won&#8217;t be able to resize
 the column.  You can set the value for each of <literal>minWidth</literal>, <literal>preferredWidth</literal> and <literal>maxWidth</literal> by passing a <literal>List</literal> to <literal>width</literal>.</simpara>
<formalpara>
<title>MyView.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">application(pack: true) {
    borderLayout()
    scrollPane(constraints: CENTER) {
      glazedTable(list: model.myTable) {
        glazedColumn(name: 'Invoice Number', property: 'number', width: 50)
        glazedColumn(name: 'Date', property: 'date', width: [50, 100])
        glazedColumn(name: 'Total', exp: { it.total() }, width: [50, 100, 200])
      }
    }
}</programlisting>
</para>
</formalpara>
<figure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/glazed_column_width.PNG"/>
</imageobject>
<textobject><phrase>glazed column width</phrase></textobject>
</mediaobject>
</figure>
<simpara>In the table above, first column is fixed and can&#8217;t be resized.  The second column can be resized to a minimum 50 pixel and
 there is no limit for its maximum size.  The third column can&#8217;t be resized to a size more than 200 pixels.</simpara>
<simpara><literal>glazedColumn()</literal> can accept instance of <literal>DefaultTableHeaderRenderer</literal>, <literal>TableCellRenderer</literal> or <literal>TableCellEditor</literal> as child nodes.
 The common use case is to pass a <literal>TableCellRenderer</literal> to <literal>glazedColumn()</literal> in order to format the presentation of this column.
 You can use <literal>templateRenderer()</literal> to create an instance of <literal>TableCellRenderer</literal> that supports simple-jpa template renderer
 expression.  See <xref linkend="template-renderer"/> for more information about template renderer expression.</simpara>
<simpara>For example, you can add uppercase format to the first column, date format to the second column and currency format to
the third column as in the following view:</simpara>
<formalpara>
<title>MyView.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">application(pack: true) {
    borderLayout()
    scrollPane(constraints: CENTER) {
      glazedTable(list: model.myTable) {
        glazedColumn(name: 'Invoice Number', property: 'number') {
          templateRenderer('this:upperCase')
        }
        glazedColumn(name: 'Date', property: 'date') {
          templateRenderer(exp: {it?.toString('dd-MM')?:'-'})
        }
        glazedColumn(name: 'Total', exp: { it.total() }) {
          templateRenderer('this:currencyFormat')
        }
      }
    }
}</programlisting>
</para>
</formalpara>
<figure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/glazed_column_renderer.PNG"/>
</imageobject>
<textobject><phrase>glazed column renderer</phrase></textobject>
</mediaobject>
</figure>
<tip>
<simpara>Why add <literal>templateRenderer</literal> while you can convert all of your column to string by using <literal>exp</literal> in <literal>glazedColumn</literal>?
 Converting all values to string is simpler, but you will loose natural ordering when sorting a column.  If you use
 <literal>templateRenderer</literal>, sorting a column is not performed by comparing formatted value but instead it is based on the original
 (unformatted) value.</simpara>
</tip>
<simpara>Because <literal>templateRenderer()</literal> generates an instance of <literal>JLabel</literal>, you can set public properties of resulting <literal>JLabel</literal> by
using their name as attribute in <literal>templateRenderer()</literal>.  For example, to right align the third column, you can use the following code:</simpara>
<formalpara>
<title>MyView.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">import static javax.swing.SwingConstants.*

application(pack: true) {
    borderLayout()
    scrollPane(constraints: CENTER) {
      glazedTable(list: model.myTable) {
        glazedColumn(name: 'Invoice Number', property: 'number')
        glazedColumn(name: 'Date', property: 'date') {
          templateRenderer(exp: {it?.toString('dd-MM-YYYY')?:'-'})
        }
        glazedColumn(name: 'Total', exp: { it.total() }, columnClass: Integer) { <co xml:id="CO2-1"/>
          templateRenderer('this:currencyFormat', horizontalAlignment: RIGHT)    <co xml:id="CO2-2"/>
        }
      }
    }
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO2-1">
<para>This causes column header to be right aligned.</para>
</callout>
<callout arearefs="CO2-2">
<para>Right align every cell for this column.</para>
</callout>
</calloutlist>
<figure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/glazed_column_alignment.PNG"/>
</imageobject>
<textobject><phrase>glazed column alignment</phrase></textobject>
</mediaobject>
</figure>
<simpara><literal>templateRenderer</literal> also supports custom condition that set its property based on some conditions.  For example, the
following view will set font color for third column to red if its value is less than $1000:</simpara>
<formalpara>
<title>MyView.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">import static javax.swing.SwingConstants.*
import java.awt.Color

application(pack: true) {
    borderLayout()
    scrollPane(constraints: CENTER) {
      glazedTable(list: model.myTable) {
        glazedColumn(name: 'Invoice Number', property: 'number')
        glazedColumn(name: 'Date', property: 'date') {
          templateRenderer(exp: {it?.toString('dd-MM-YYYY')?:'-'})
        }
        glazedColumn(name: 'Total', exp: { it.total() }, columnClass: Integer) {
          templateRenderer('this:currencyFormat', horizontalAlignment: RIGHT) {
            condition(if_: {it &lt; 1000}, then_property_: 'foreground', is_: Color.RED, else_is_: Color.BLACK)
            condition(if_: {isSelected}, then_property_: 'foreground', is_: Color.WHITE)
          }
        }
      }
    }
}</programlisting>
</para>
</formalpara>
<figure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/glazed_column_conditional.PNG"/>
</imageobject>
<textobject><phrase>glazed column conditional</phrase></textobject>
</mediaobject>
</figure>
<tip>
<simpara>Using <literal>condition()</literal> inside <literal>templateRenderer()</literal> is useful for simple condition.  If you have a complex rendering
 calculation, consider creating your own implementation of <literal>TableCellRenderer</literal>.</simpara>
</tip>
<simpara>In addition to <literal>glazedColumn()</literal>, <literal>glazedTable()</literal> also accepts <literal>menuItem()</literal> as child node.  This will add new menu when
 user right click on the table.  By default, popup menu for <literal>glazedTable()</literal> consists of only two menu items: copy cell and
 print.  The following is a sample view that add new popup menus:</simpara>
<formalpara>
<title>MyView.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">import static javax.swing.SwingConstants.*

actions {
  action(id: 'menu1', name: 'Menu 1', closure: { println 'Menu1 is selected' })
  action(id: 'menu2', name: 'Menu 2', closure: { println 'Menu2 is selected' })
}

application(pack: true) {
    borderLayout()
    scrollPane(constraints: CENTER) {
      glazedTable(list: model.myTable) {
        glazedColumn(name: 'Invoice Number', property: 'number')
        glazedColumn(name: 'Date', property: 'date') {
          templateRenderer(exp: {it?.toString('dd-MM-YYYY')?:'-'})
        }
        glazedColumn(name: 'Total', exp: { it.total() }, columnClass: Integer) {
          templateRenderer('this:currencyFormat', horizontalAlignment: RIGHT)
        }
        menuItem(action: menu1)
        menuItem(action: menu2)
      }
    }
}</programlisting>
</para>
</formalpara>
<figure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/glazed_table_popupmenu.png"/>
</imageobject>
<textobject><phrase>glazed table popupmenu</phrase></textobject>
</mediaobject>
</figure>
<simpara>The following table lists attributes that can be used in <literal>glazedTable()</literal>:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Attributes for <literal>glazedTable()</literal></title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="33*"/>
<colspec colname="col_2" colwidth="33*"/>
<colspec colname="col_3" colwidth="33*"/>
<thead>
<row>
<entry align="left" valign="top">Name</entry>
<entry align="left" valign="top">Type</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>list</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>EventList</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Source value for this table.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>sortingStrategy</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>ca.odell.glazedlists.impl.gui.SortingStrategy</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Sorting strategy for this table.  If <literal>list</literal> is not a <literal>SortedList</literal> and <literal>sortingStrategy</literal> is not defined, <literal>list</literal> will
 be converted into a <literal>SortedList</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>onValueChanged</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Closure</simpara></entry>
<entry align="left" valign="top"><simpara>This closure will be executed if table selection is changed.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>isRowSelected</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Boolean</simpara></entry>
<entry align="left" valign="top"><simpara><literal>true</literal> is row in table is selected.  This property is bindable.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>isNotRowSelected</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Boolean</simpara></entry>
<entry align="left" valign="top"><simpara><literal>true</literal> is nothing is selected in table.  This property is bindable.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>tableFormat</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>GlazedTableFormat</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>GlazedTableFormat</literal> used by <literal>TableModel</literal> in this table.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>doubleClickAction</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>Action</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Action that will be triggered when user double click a row in this table.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>enterKeyAction</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>Action</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Action that will be triggered when user press Enter key while row is selected in this table.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara><literal>glazedTable()</literal> creates an instance of <literal>JTable</literal> so you can also set any public properties of <literal>JTable</literal> as attribute in
 <literal>glazedTable()</literal>.</simpara>
</section>
<section xml:id="template-renderer">
<title>Template Renderer</title>
<simpara>simple-jpa a new <literal>templateRenderer</literal> attribute to <literal>comboBox()</literal> and <literal>list()</literal> node to allow you customize renderer without
creating a new renderer class for every components.  <literal>templateRenderer()</literal> in <literal>glazedColumn()</literal> also uses the same thing.</simpara>
<simpara><literal>templateRenderer</literal> attribute accepts a closure or string.  If <literal>templateRenderer</literal> is a closure, it will be executed
  and the result is displayed.  Inside the closure, <literal>it</literal> refers to original value.  You can also call the following
  built-in functions from inside this closure:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Built-in functions in <literal>templateRenderer</literal></title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Function</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>floatFormat(v, d)</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Format a number using number style and limit fraction digits to <literal>d</literal> digits.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>numberFormat(v)</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Format a number using number style.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>percentFormat(v)</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Format a number using percent style.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>currencyFormat(v)</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Format a number using currency style.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>lowerCase(v)</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Change string to lower case.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>upperCase(v)</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Change string to upper case.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>titleCase(v)</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Change string to title case.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>For example, the following code show how objects are displayed in <literal>JComboBox</literal> and <literal>JList</literal> without using <literal>templateRenderer</literal>:</simpara>
<formalpara>
<title>MyModel.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">import ca.odell.glazedlists.*
import ca.odell.glazedlists.swing.*

class LatihanModel {

   BasicEventList myList = new BasicEventList()
   DefaultEventComboBoxModel listModel = new DefaultEventComboBoxModel(myList)

}</programlisting>
</para>
</formalpara>
<formalpara>
<title>MyController.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">import domain.*
import org.joda.time.*

class LatihanController {

    def model
    def view

    void mvcGroupInit(Map args) {
        Invoice invoice1 = new Invoice('inv01', LocalDate.parse('2015-01-01'))
        invoice1.add(new LineItem('Product1', 100, 1))
        invoice1.add(new LineItem('Product2', 200, 2))

        Invoice invoice2 = new Invoice('inv02', LocalDate.parse('2015-01-02'))
        invoice2.add(new LineItem('Product3', 300, 3))
        invoice2.add(new LineItem('Product4', 400, 4))

        execInsideUISync {
            model.myList &lt;&lt; invoice1
            model.myList &lt;&lt; invoice2
        }
    }

}</programlisting>
</para>
</formalpara>
<formalpara>
<title>MyView.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">application(pack: true) {
    flowLayout()
    comboBox(model: model.listModel)
    list(model: model.listModel)
}</programlisting>
</para>
</formalpara>
<figure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/normal_combobox_and_list.PNG"/>
</imageobject>
<textobject><phrase>normal combobox and list</phrase></textobject>
</mediaobject>
</figure>
<simpara>Here is what it looks like after adding <literal>templateRenderer</literal> in view:</simpara>
<formalpara>
<title>MyView.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">application(pack: true) {
    flowLayout()
    comboBox(model: model.listModel, templateRenderer: { it.number })
    list(model: model.listModel, templateRenderer: { "${it.number} Qty: ${it.items.size()}" })
}</programlisting>
</para>
</formalpara>
<figure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/combobox_and_list_with_template_renderer.PNG"/>
</imageobject>
<textobject><phrase>combobox and list with template renderer</phrase></textobject>
</mediaobject>
</figure>
<simpara>You can also pass a string to <literal>templateRenderer</literal>.  The string can be a property name or method call.  If it is a method call,
 it should be starts with <literal>'#'</literal> character.  You can also call built-in functions by adding <literal>':'</literal> followed by  a function name.</simpara>
<formalpara>
<title>MyView.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">import static javax.swing.SwingConstants.*

application(pack: true) {
    borderLayout()
    scrollPane(constraints: CENTER) {
      list(model: model.listModel, templateRenderer: "#total:currencyFormat")
    }
}</programlisting>
</para>
</formalpara>
<figure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/combobox_and_list_with_string_template_renderer.PNG"/>
</imageobject>
<textobject><phrase>combobox and list with string template renderer</phrase></textobject>
</mediaobject>
</figure>
</section>
<section xml:id="dialog-utils">
<title>Dialog Utils</title>
<simpara>simple-jpa provides <literal>mvcPopupButton()</literal> as a helper node to create a <literal>JButton</literal> that will display a modal dialog if it is
clicked.  The following steps will be performed if <literal>mvcPopupButton()</literal> is clicked:</simpara>
<itemizedlist>
<listitem>
<simpara>Create a new temporary MVC group specified by its <literal>mvcGroup</literal> attribute.  If <literal>args</literal> is closure, execute <literal>args</literal> and pass it
as arguments for the new MVC group.</simpara>
</listitem>
<listitem>
<simpara>If <literal>onBeforeDisplay</literal> is specified, call it.  The generated button and <literal>args</literal> will be passed as arguments for <literal>onBeforeDisplay</literal>.</simpara>
</listitem>
<listitem>
<simpara>Find a <literal>JPanel</literal> called <literal>mainPanel</literal> in view and display it in a modal dialog.  It is a convension that all main panel should
be named <literal>mainPanel</literal>.</simpara>
</listitem>
<listitem>
<simpara>If <literal>onFinish</literal> is specified, when user closed the modal dialog, <literal>onFinish</literal> will be executed.  Temporary model, view, and
controller is passed as arguments for <literal>onFinish</literal>.</simpara>
</listitem>
</itemizedlist>
<simpara>The following code show how to use <literal>mvcPopupButton()</literal>:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">mvcPopupButton(text: 'Click Me!', mvcGroup: 'anotherMVCGroup', dialogProperties:
  [title: 'New Dialog', size: new Dimension(900,420)], onFinish: { m, v, c -&gt;
     println m.result
  }
)</programlisting>
<simpara><literal>mvcPopupButton()</literal> relies to <literal>DialogUtils</literal> to create modal dialog.  The following is lists of all available methods in <literal>DialogUtils</literal>:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>showMVCGroup(MVCGroup mvcGroup, GriffonView view, Map dialogProperties = [:], LayerUI layerUI = null, Closure onFinish = null)</literal></simpara>
<simpara>Use this method to display view from existing MVC group instance in modal dialog.</simpara>
</listitem>
<listitem>
<simpara><literal>showMVCGroup(String mvcGroupName, Map args = [:], GriffonView view, Map dialogProperties = [:], LayerUI layerUI, Closure onFinish = null)</literal></simpara>
<simpara>This method creates a temporary MVC group instance and display its view in modal dialog.  Use this method if you need to pass an <literal>LayerUI</literal>.</simpara>
</listitem>
<listitem>
<simpara><literal>showMVCGroup(String mvcGroupName, Map args = [:], GriffonView view, Map dialogProperties = [:], Closure onFinish = null)</literal></simpara>
<simpara>This method creates a temporary MVC group instance and display its view in modal dialog.</simpara>
<simpara>Example:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">def args = [parentList: model.items]
def props = [title: 'Items']
DialogUtils.showMVCGroup('lineItemAsChild', args, view, props) { m, v, c -&gt;
  model.items.clear()
  model.items.addAll(m.lineItemList)
}</programlisting>
</listitem>
<listitem>
<simpara><literal>showAndReuseMVCGroup(String mvcGroupName, Map args = [:], GriffonView view, Map dialogProperties = [:], LayerUI layerUI = null, Closure onFinish = null)</literal></simpara>
<simpara>This method creates a new MVC group instance and display its view in modal dialog.  The created MVC group instance won&#8217;t be destroyed.</simpara>
</listitem>
<listitem>
<simpara><literal>confirm(Component parent, String message, String title, int messageType = JOptionPane.QUESTION_MESSAGE)</literal></simpara>
<simpara>Display a confirmation message and returns <literal>true</literal> if user confirms the dialog.  This method always run in EDT.</simpara>
<simpara>Example:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">if (!DialogUtils.confirm(view.mainPanel, 'Do you want to continue?', 'Delete Confirmation')) {
    return
}</programlisting>
</listitem>
<listitem>
<simpara><literal>message(Component parent, String message, String title, int messageType = JOptionPane.INFORMATION_MESSAGE)</literal></simpara>
<simpara>Display message dialog.  This method always run in EDT.</simpara>
<simpara>Example:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">DialogUtils.message(null, errorMessage, 'Error', JOptionPane.ERROR_MESSAGE)</programlisting>
</listitem>
<listitem>
<simpara><literal>input(Component parent, String message, String title, int messageType = JOptionPane.QUESTION_MESSAGE)</literal></simpara>
<simpara>Display input dialog and return user input as string.  This method always run in EDT.</simpara>
<simpara>Example:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">String updatedScore = DialogUtils.input(view.mainPanel, 'Please Enter your new score:', 'New Score')</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="transaction">
<title>Transaction</title>
<simpara>simple-jpa uses <literal>EntityManager</literal> per transaction strategy.  A new <literal>EntityManager</literal> is created when transaction begins and
  it is destroyed when transaction is finished.  Using <literal>EntityManager</literal> in Griffon is a bit tricky since <literal>EntityManager</literal>
  is not thread-safe while Griffon may execute code in different thread.  To solve this problem, simple-jpa creates
  a new <literal>EntityManager</literal> for each different threads.</simpara>
<section xml:id="transaction-annotation">
<title>@Transaction Annotation</title>
<simpara>You can use <literal>@Transaction</literal> annotation to wrap a method in transaction.  This annotation should only be used on artifacts
 that have been injected by <xref linkend="persistence-methods"/>.  Using <literal>@Transaction</literal> on artifacts that don&#8217;t have persistence methods
  will raise errors.</simpara>
<simpara>The following code show the basic usage of <literal>@Transaction</literal>:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">class MyRepository {

  @Transaction
  void register() {
   ...
  }

}</programlisting>
<simpara>You can also apply <literal>@Transaction</literal> to all methods in the class by simply add the annotation at class level.</simpara>
<programlisting language="groovy" linenumbering="unnumbered">@Transaction
class MyRepository {

  void register() {
     ...
  }

  void unregister() {
     ...
  }

}</programlisting>
<simpara><literal>@Transaction</literal> accepts a value that can be <literal>Policy.NORMAL</literal> or <literal>Policy.SKIP</literal>.</simpara>
<simpara><literal>Policy.NORMAL</literal> (default value) supports nested transaction.  If <literal>methodA()</literal> calls <literal>methodB()</literal> and both methods
are annotated by <literal>@Transaction</literal>, they are executed in the same transaction.  If one of <literal>methodA()</literal> and <literal>methodB()</literal>
raises an <literal>Exception</literal>, none of their queries will be committed.</simpara>
<formalpara>
<title>MyRepository.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">@Transaction
class MyRepository {

    void methodA() {
        MyEntity entityA = new MyEntity('Entity A')
        persist(entityA)
        methodB()
    }

    void methodB() {
        MyEntity entityB = new MyEntity('Entity B')
        persist(entityB)
        throw new RuntimeException('Something fails here!')
    }

}</programlisting>
</para>
</formalpara>
<formalpara>
<title>MyController.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">class MyController {

    MyRepository myRepository

    def test = {
        // Both entityA and entityB are not persisted to database
        // because methodB() fails with Exception.
        myRepository.methodA()
    }

}</programlisting>
</para>
</formalpara>
<simpara>Nested transaction only work if methods are called from within the same thread.  If <literal>methodB()</literal> is executed by using
method such as <literal>app.execFuture()</literal> or <literal>app.eventAsync()</literal>, simple-jpa can&#8217;t guarantee it will be part of caller
transaction.  This is especially true if thread pool is involved.</simpara>
<formalpara>
<title>MyRepository.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">@Transaction
class MyRepository {

    def app

    void methodA() {
        MyEntity entityA = new MyEntity('Entity A')
        persist(entityA)
        app.execFuture { methodB() }
    }

    void methodB() {
        MyEntity entityB = new MyEntity('Entity B')
        persist(entityB)
        throw new RuntimeException('Something fails here!')
    }

}</programlisting>
</para>
</formalpara>
<formalpara>
<title>MyController.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">class MyController {

    MyRepository myRepository

    def test = {
        // entityA is persisted to database but
        // entityB is *NOT* persisted to database!
        myRepository.methodA()
    }

}</programlisting>
</para>
</formalpara>
<tip>
<simpara>To avoid unexpected random errors such as duplicate primary key or missing entity, don&#8217;t use multithreading
in persistence layer!</simpara>
</tip>
<simpara><literal>Policy.SKIP</literal> is used to tell simple-jpa to not apply transaction AST transformation to the annotated method.  This can
 be useful if you use <literal>@Transaction</literal> at class level and want to avoid wrapping few methods in transaction.</simpara>
<formalpara>
<title>MyController.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">@Transaction
class MyController {

    MyRepository myRepository

    def create = {
        // Calling this closure will start a new transaction
        // or continue existing transaction if caller is in transaction.
    }

    def remove = {
        // Calling this closure will start a new transaction
        // or continue existing transaction if caller is in transaction.
    }

    @Transaction(Transaction.Policy.SKIP)
    def calculate = {
        // Calling this closure will *NOT* start a new transaction!
        // If caller is in transaction, it will be part of that transaction.
    }

}</programlisting>
</para>
</formalpara>
</section>
<section xml:id="transaction-methods">
<title>Transaction Methods</title>
<simpara>You can also create transaction without using <literal>@Transaction</literal> annotation.  This can be done by calling transaction methods
 manually.  Because transaction methods is part of persistence methods, they are only available in injected artifacts.  The
 following is list of transaction methods:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>beginTransaction()</literal></simpara>
<simpara>Use this method to mark the beginning of new transaction.</simpara>
</listitem>
<listitem>
<simpara><literal>commitTransaction()</literal></simpara>
<simpara>Use this method to commit current transaction.  This method will destroys <literal>EntityManager</literal> if current transaction is not
 nested.</simpara>
</listitem>
<listitem>
<simpara><literal>rollbackTransaction()</literal></simpara>
<simpara>Use this method to rollback current transaction.  This method will destroys <literal>EntityManager</literal>.</simpara>
</listitem>
<listitem>
<simpara><literal>withTransaction(closure)</literal></simpara>
<simpara>Execute closure inside transaction.  Inside this closure, you can directly call persistence methods.</simpara>
</listitem>
</itemizedlist>
<simpara>For example, if controllers are injected with persistence methods, you can use the following code to create new transaction:</simpara>
<formalpara>
<title>MyController.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">class MyController {

  def save = {
    beginTransaction()
      try {
        ... // perform works here
        commitTransaction()
      } catch (Exception ex) {
        rollbackTransaction()
      }
  }

}</programlisting>
</para>
</formalpara>
<simpara><literal>withTransaction()</literal> allows you to wrap a closure inside transaction.  For example, you can replace the previous sample
code into:</simpara>
<formalpara>
<title>MyController.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">class MyController {

  def save = {
    withTransaction {
      ... // perform works here
    }
  }

}</programlisting>
</para>
</formalpara>
<simpara>You can always call persistence methods directly inside the closure.  This is very useful if you call <literal>withTransaction</literal>
 from another class, for example:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">class MyDomainClass {

   MyRepository myRepository

   public BigDecimal calculate() {
      ...
      myRepository.withTransaction {
         ...
         executeQuery("FROM Invoice i WHERE i.dueDate &gt; :date", aDate)
         ...
      }
      ...
   }

}</programlisting>
</section>
</section>
<section xml:id="auditing">
<title>Auditing</title>
<section xml:id="auditable-domain-class">
<title>Auditable Domain Class</title>
<simpara>Classes annotated by <literal>@DomainClass</literal> will automatically have the following auditing properties:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Auditing Properties In Domain Class</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Name</entry>
<entry align="left" valign="top">Type</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>createdDate</simpara></entry>
<entry align="left" valign="top"><simpara>java.util.Date</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>createdBy</simpara></entry>
<entry align="left" valign="top"><simpara>String</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>modifiedDate</simpara></entry>
<entry align="left" valign="top"><simpara>java.util.Date</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>modifiedBy</simpara></entry>
<entry align="left" valign="top"><simpara>String</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>To disable automatic creation of auditing properties for a domain class, use <literal>excludeAuditing</literal> property.  For example:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">@Entity @DomainClass(excludeAuditing=true) @Canonical
class Customer {

}</programlisting>
<simpara>The value for auditing properties are set by JPA entity listener <literal>simplejpa.AuditingEntityListener</literal>.  <xref linkend="create-simple-jpa"/>
command by default will create <literal>griffon-app/conf/metainf/orm.xml</literal> to register <literal>simplejpa.AuditingEntityListener</literal> as default entity listener.
The default content of generated <literal>orm.xml</literal> is:</simpara>
<formalpara>
<title>griffon-app/conf/metainf/orm.xml</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;entity-mappings version="2.0" xmlns="http://java.sun.com/xml/ns/persistence/orm"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xsi:schemaLocation="http://java.sun.com/xml/ns/persistence/orm orm_2_0.xsd"&gt;

&lt;persistence-unit-metadata&gt;
    &lt;persistence-unit-defaults&gt;
        &lt;entity-listeners&gt;
            &lt;entity-listener class="simplejpa.AuditingEntityListener" /&gt;
        &lt;/entity-listeners&gt;
    &lt;/persistence-unit-defaults&gt;
&lt;/persistence-unit-metadata&gt;

&lt;/entity-mappings&gt;</programlisting>
</para>
</formalpara>
<tip>
<simpara>You can completely disable auditing by removing the line that register <literal>simplejpa.AuditingEntityListener</literal> in <literal>orm.xml</literal>.</simpara>
</tip>
<tip>
<simpara>You can also register your own custom JPA Entity Listener in <literal>orm.xml</literal>.</simpara>
</tip>
<simpara>Built-in scaffolding&#8217;s generator will generate views that has auditing properties in them.  By default, generated views display
<literal>java.util.Date</literal> by its string representation such as <literal>Wed Aug 20 13:09:11 ICT 2014</literal>.  To display <literal>java.util.Date</literal> by using
a custom formatter, style for both date and time can be specified in <literal>Config.groovy</literal>:</simpara>
<formalpara>
<title>Config.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">griffon.simplejpa.scaffolding.dateTimeStyle = 'MEDIUM'</programlisting>
</para>
</formalpara>
<simpara>The configuration above will generate the following code in controller:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">def selectionChanged = {
   ...
   model.created = selected.createdDate?DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM).format(selected.createdDate):null
   model.modified = selected.modifiedDate?DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM).format(selected.modifiedDate):null
   ...
}</programlisting>
<simpara>The following is list of available styles (see <link xlink:href="http://docs.oracle.com/javase/tutorial/i18n/format/dateFormat.html">http://docs.oracle.com/javase/tutorial/i18n/format/dateFormat.html</link> for more information):</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Possible Values for Date Time Style Configuration</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="33*"/>
<colspec colname="col_2" colwidth="33*"/>
<colspec colname="col_3" colwidth="33*"/>
<thead>
<row>
<entry align="left" valign="top">Style</entry>
<entry align="left" valign="top">Sample Value in U.S. Locale</entry>
<entry align="left" valign="top">Sample Value in French Locale</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>DEFAULT</simpara></entry>
<entry align="left" valign="top"><simpara>Jun 30, 2009 7:03:47 AM</simpara></entry>
<entry align="left" valign="top"><simpara>30 juin 2009 07:03:47</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>SHORT</simpara></entry>
<entry align="left" valign="top"><simpara>6/30/09 7:03 AM</simpara></entry>
<entry align="left" valign="top"><simpara>30/06/09 07:03</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>MEDIUM</simpara></entry>
<entry align="left" valign="top"><simpara>Jun 30, 2009 7:03:47 AM</simpara></entry>
<entry align="left" valign="top"><simpara>30 juin 2009 07:03:47</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>LONG</simpara></entry>
<entry align="left" valign="top"><simpara>June 30, 2009 7:03:47 AM PDT</simpara></entry>
<entry align="left" valign="top"><simpara>30 juin 2009 07:03:47 PDT</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>FULL</simpara></entry>
<entry align="left" valign="top"><simpara>Tuesday, June 30, 2009 7:03:47 AM PDT</simpara></entry>
<entry align="left" valign="top"><simpara>mardi 30 juin 2009 07 h 03 PDT</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<tip>
<simpara>You can always change the generated code to use any custom formatter.</simpara>
</tip>
</section>
<section xml:id="logged-user">
<title>Logged User</title>
<simpara>simple-jpa expects the value of current user is stored in <literal>SimpleJpaUtil.user</literal>.  Value for this property must be an
an implementation of <literal>AuditableUser</literal>.  For example, developer can create a domain class that implement <literal>AuditableUser</literal> such as:</simpara>
<formalpara>
<title>User.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">package domain

import ...

@DomainClass @Entity @Canonical
class User implements AuditableUser {

    @NotEmpty @Size(min=2, max=50)
    String name

    @Override
    String getUserName() {
        return name
    }

}</programlisting>
</para>
</formalpara>
<simpara>The following code can be used to set current (logged) user:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">User user = new User('guest')
SimpleJpaUtil.instance.user = user</programlisting>
<simpara>The code above will set <literal>createdBy</literal> and <literal>modifiedBy</literal> of new entity or updated entity to <literal>'guest'</literal>.</simpara>
<tip>
<simpara>You&#8217;re not required to set current user.  If <literal>SimpleJpaUtil.user</literal> is null, value for <literal>createdBy</literal> and <literal>modifiedBy</literal>
 will be ignored.  Regardless whether <literal>SimpleJpaUtil.user</literal> is available or not, <literal>createdTime</literal> and <literal>modifiedTime</literal> are always updated.</simpara>
</tip>
</section>
<section xml:id="login-dialog">
<title>Login Dialog</title>
<simpara>simple-jpa can display a login dialog by using SwingX <literal>JXLoginPane</literal> at startup time.  To enable this feature, a service
that is derived from <literal>org.jdesktop.swingx.auth.LoginService</literal> is required.  The following is typical steps to create
 such service:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Create a new service by using Griffon&#8217;s <literal>create-service</literal> command.  For example:</simpara>
<literallayout class="monospaced">griffon create-service DatabaseLoginService</literallayout>
</listitem>
<listitem>
<simpara>Change the generated service (in <literal>griffon-app/services</literal> folder) and extends it from <literal>org.jdesktop.swingx.auth.LoginService</literal>.  For example:</simpara>
<formalpara>
<title>DatabaseLoginService.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">package sample

import domain.User
import org.jdesktop.swingx.auth.LoginService
import simplejpa.SimpleJpaUtil

class DatabaseLoginService extends LoginService {

    @Override
    boolean authenticate(String name, char[] password, String server) throws Exception {
        if (name == 'jocki' &amp;&amp; new String(password) == 'toor') {
            SimpleJpaUtil.instance.user = new User('jocki')
            return true
        }
        false
    }

}</programlisting>
</para>
</formalpara>
<tip>
<simpara>If you add <literal>@Transaction</literal> to <literal>DatabaseLoginService</literal> and add the following line to <literal>Config.groovy</literal> (See <xref linkend="finders-2"/> for more information):</simpara>
<formalpara>
<title>Config.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">griffon.simplejpa.finders.injectInto = ['controller', 'service']</programlisting>
</para>
</formalpara>
<simpara>You will have access to simple-jpa dynamic finders in <literal>authenticate()</literal> method.  Typically, you will query the requested user
from database and check if user&#8217;s password is correct.</simpara>
</tip>
</listitem>
<listitem>
<simpara>Add the service name as value for <literal>griffon.simplejpa.auditing.loginService</literal> in <literal>Config.groovy</literal>.  For example:</simpara>
<formalpara>
<title>Config.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">griffon.simplejpa.auditing.loginService = 'DatabaseLoginService'</programlisting>
</para>
</formalpara>
</listitem>
</orderedlist>
<simpara>When application is started, the following login dialog will be displayed:</simpara>
<figure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/login_dialog.png"/>
</imageobject>
<textobject><phrase>login dialog</phrase></textobject>
</mediaobject>
</figure>
<simpara>If user cancels the dialog, simple-jpa will terminate the application.  If user enters the correct credentials (which means
<literal>LoginService.authenticate()</literal> returns <literal>true</literal>), simple-jpa will display startup group as usual.</simpara>
</section>
</section>
<section xml:id="finders">
<title>Finders</title>
<simpara>Finders are part of persistence methods that are used to retrieve JPA entities from database.  In addition to static methods,
simple-jpa also supports dynamic finder.  With dynamic finder, you can find entity based on certain pattern in method name.</simpara>
<section xml:id="query-methods">
<title>Query Methods</title>
<simpara>simple-jpa injects the following query methods:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>executeNamedQuery(namedQuery, map, config)</literal></simpara>
<simpara>Execute JPA named query.</simpara>
</listitem>
<listitem>
<simpara><literal>executeQuery(jpql, config)</literal></simpara>
<simpara>Execute JP QL.</simpara>
</listitem>
<listitem>
<simpara><literal>executeNativeQuery(sql)</literal></simpara>
<simpara>Execute SQL.</simpara>
</listitem>
</itemizedlist>
<simpara>To use named queries, you must defined them first, for example:</simpara>
<formalpara>
<title>Invoice.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">@NamedQuery(name='Invoice.LargeQty', query='''
	FROM Invoice inv LEFT JOIN inv.items i WHERE i.qty &gt; :limit
''')
@DomainClass @Entity @Canonical
class Invoice {

	...

}</programlisting>
</para>
</formalpara>
<simpara>Now you can call <literal>Invoice.LargeAmount</literal> by using code like:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">def result = myRepository.executeNamedQuery('Invoice.LargeQty', [limit: 500])
println "Invoices with large qty in one of their items:"
println result.collect { it.number }.join(',')</programlisting>
<simpara>Named queries are parsed when application is launched.  Although they make application startup slower, they are quick to
 serve you when you need them because they&#8217;re prepared.</simpara>
<simpara>As an alternative to named query, you can always directly call JP QL by using <literal>executeQuery()</literal>, for example:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">def result = myRepository.executeQuery(
   'FROM Invoice inv LEFT JOIN inv.items i  WHERE i.qty &gt; :limit',
   [:], [limit: 500])</programlisting>
<tip>
<simpara>Don&#8217;t forget that you can use <literal>simple-jpa-console</literal> script to launch Groovy console to try query methods described
 in this chapter.</simpara>
</tip>
<simpara>JPA can hurt performance if your query return a very large result.  This is because JPA provider needs to translate
 every rows from native SQL query into object (entities).  Creating a lot of objects in a short time may leads to
 memory shortage in heap.  To avoid these problems, you can use <literal>executeNativeQuery()</literal> to execute SQL:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">def result = myRepository.executeNativeQuery('''
   SELECT i.number, SUM(li.qty * li.price) AS total
   FROM Invoice i
   LEFT JOIN Invoice_Items li ON li.invoice_id = i.id
   GROUP BY i.number
''')
// result is an array
println result[0][0]  // print first column of first record
println result[0][1]  // print second column of first record
println result[1][0]  // print first column of second record
println result[1][1]  // print second column of second record</programlisting>
<tip>
<simpara>Don&#8217;t use <literal>executeNativeQuery()</literal> if not necessary.  Your code become prone to mismatch between query and domain
classes. If you find yourself create a lot of SQL queries, you need to consider to use native SQL approach instead of JPA.</simpara>
</tip>
</section>
<section xml:id="dynamic-finder">
<title>Dynamic Finder</title>
<simpara>Dynamic finder works by following certain pattern in method name.  For example, if you want to select all <literal>Invoice</literal>, you
can call the following method:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">List result = myRepository.findAllInvoice()
println result.collect { it.number }.join(',')</programlisting>
<simpara>Finder starts with <literal>findAll</literal> always return a <literal>List</literal>.  If nothing is found, it returns an empty <literal>List</literal>.</simpara>
<simpara>You can add a criteria by using adding <literal>by</literal> to the finder followed by property name, for example:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">List result = myRepository.findAllInvoiceByNumber('INV02')
println result.collect { it.number }.join(',')</programlisting>
<simpara>If you want to return only a single instance, drop <literal>all</literal> from the finder name, for example:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">Invoice result = myRepository.findInvoiceByNumber('INV02')
println result?.number</programlisting>
<simpara>The finder returns an instance of <literal>Invoice</literal> or <literal>null</literal> if nothing is found.</simpara>
<simpara>You can combine multiple criteria by using logical operator <literal>and</literal> and <literal>or</literal>, for example:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">myRepository.findAllInvoiceByNumberAndDate('INV02', LocalDate.parse('2015-02-01'))</programlisting>
<simpara>In the previous examples, you&#8217;ve searched based on equality (<literal>eq</literal>).  simple-jpa dynamic finders also supports different
  operators such as:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>greaterThanEqualTo</literal> or <literal>ge</literal></simpara>
</listitem>
<listitem>
<simpara><literal>lessThanEqualTo</literal> or <literal>le</literal></simpara>
</listitem>
<listitem>
<simpara><literal>greaterThan</literal> or <literal>gt</literal></simpara>
</listitem>
<listitem>
<simpara><literal>lessThan</literal> or <literal>lt</literal></simpara>
</listitem>
<listitem>
<simpara><literal>isNotMember</literal></simpara>
</listitem>
<listitem>
<simpara><literal>isNotEmpty</literal></simpara>
</listitem>
<listitem>
<simpara><literal>isNotNull</literal></simpara>
</listitem>
<listitem>
<simpara><literal>notEqual</literal> or <literal>ne</literal></simpara>
</listitem>
<listitem>
<simpara><literal>isMember</literal></simpara>
</listitem>
<listitem>
<simpara><literal>isEmpty</literal></simpara>
</listitem>
<listitem>
<simpara><literal>isNull</literal></simpara>
</listitem>
<listitem>
<simpara><literal>like</literal></simpara>
</listitem>
<listitem>
<simpara><literal>notLike</literal></simpara>
</listitem>
<listitem>
<simpara><literal>between</literal></simpara>
</listitem>
</itemizedlist>
<simpara>For example, to search for all invoices created in this month, you can use the following code:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">def dateBegin = LocalDate.now().dayOfMonth().withMinimumValue()
def dateEnd = LocalDate.now().dayOfMonth().withMaximumValue()
def result = myRepository.findAllInvoiceByDateBetween(dateBegin, dateEnd)</programlisting>
<simpara>In this another example, you find products by name using <literal>like</literal> operator:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">myRepository.findAllProductByNameLike('A%')</programlisting>
<simpara>You can search for nested properties by using double underscore (<literal>__</literal>) as separator.  For example, the following
query finds all products based on supplier&#8217;s location:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">myRepository.findAllProductBySupplier__City__NameLike('a city%')</programlisting>
</section>
<section xml:id="dsl-finder">
<title>Dsl Finder</title>
<simpara>In addition to using dynamic finder, you can also perform query by using Dsl finder.  Such finder requires a closure as
 argument.  The following code show how to use Dsl Finder:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">def dateBegin = LocalDate.now().dayOfMonth().withMinimumValue()
def dateEnd = LocalDate.now().dayOfMonth().withMaximumValue()
myRepository.findAllInvoiceByDsl {
    number eq('INV02')
    and()
    date between(dateBegin, dateEnd)
}</programlisting>
<simpara>The advantage of using Dsl closure is you can build the query conditions based on certain condition.   You can also add
 any code inside the closure.  For example, the following code add query condition only if certain variables are not null:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">def dateBeginSearch = LocalDate.now().dayOfMonth().withMinimumValue()
def dateEndSearch = LocalDate.now().dayOfMonth().withMaximumValue()
def numberSearch = null
myRepository.findAllInvoiceByDsl {
  if (numberSearch) {
    number eq(numberSearch)
  }
  if (dateBeginSearch &amp;&amp; dateEndSearch) {
    date between(dateBeginSearch, dateEndSearch)
  }
}</programlisting>
<simpara>You can also use nested properties by using double underscores (<literal>__</literal>) as separator, for example:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">myRepository.findAllProductByDsl {
  supplier__name isIn(['supplier a', 'supplier b'])
  and()
  name eq('A product')
}</programlisting>
</section>
<section xml:id="named-entity-graph">
<title>Named Entity Graph</title>
<simpara>Named entity graph is a new feature in JPA 2.1.  It allows you to define a flexible fetch graph without modifying your
current query.  For example, you can define named entity graph such as:</simpara>
<formalpara>
<title>Invoice.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">package domain

// import statements are not shown

@NamedEntityGraph(name='Invoice.Items', attributeNodes=[
  @NamedAttributeNode('items')
])
@DomainClass @Entity @Canonical(excludes='items')
class Invoice {

  @NotEmpty @Size(min=5, max=5)
  String number

  @NotNull @Type(type="org.jadira.usertype.dateandtime.joda.PersistentLocalDate")
  LocalDate date

  @ElementCollection @OrderColumn @NotEmpty
  List&lt;LineItem&gt; items = []

  void add(LineItem item) {
    items &lt;&lt; item
  }

  BigDecimal total() {
    items.sum { it.total() }
  }

}</programlisting>
</para>
</formalpara>
<simpara>If you want to use named entity graph in simple-jpa finders, you should always start the name with domain class name
 followed by a period (<literal>.</literal>) before the actual name.  To use named entity graph, add <literal>fetch</literal> or <literal>load</literal> to dynamic finder,
 for example:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">// items is lazy loaded.  It will trigger SQL query when code refer to it.
// result is not safe to be passed to outside transaction because
// SQL query is required to retrieve items.
def result = myRepository.findAllInvoice()

// items has been loaded.
// anotherResult is safe to be passed to outside transaction because
// items is safe to read from anywhere.
def anotherResult = myRepository.findAllInvoiceFetchItems()</programlisting>
<simpara>In addition to using <literal>fetch</literal> in dynamic finder, you can also use named entity graph by passing them query configuration
 using <literal>fetchGraph</literal> or <literal>loadGraph</literal> as key.  See <xref linkend="query-configuration"/> for more information.</simpara>
</section>
<section xml:id="query-configuration">
<title>Query Configuration</title>
<simpara>Most of finder methods described so far can receive a configuration parameter in form of <literal>Map</literal>.  You can use the following
 values as its keys:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>excludeSubclass</literal></simpara>
<simpara>The value must be a string.  Normal query returns all instances of current class and its subclasses.  For example, if <literal>Employee</literal>
 has three subclasses <literal>Teacher</literal>, <literal>Researcher</literal>, and <literal>Staff</literal>, then <literal>findAllEmploye()</literal> returns instances of  <literal>Employee</literal>, <literal>Teacher</literal>,
 <literal>Researcher</literal> and <literal>Staff</literal>.  If you want to return only <literal>Teacher</literal> and <literal>Staff</literal>, you can use the following code:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">myRepository.findAllEmployee([excludeSubclass: 'Researcher'])</programlisting>
<simpara>Assuming <literal>Employee</literal> is not an abstract class and it have instances, then you can use following code to only return instances
of <literal>Employee</literal>:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">myRepository.findAllEmployee([excludeSubclass: '*'])</programlisting>
</listitem>
<listitem>
<simpara><literal>flushMode</literal></simpara>
<simpara>The value must be one of <literal>FlushModeType.COMMIT</literal> or <literal>FlushModeType.AUTO</literal>.  Use this key to override flush mode for current query.</simpara>
</listitem>
<listitem>
<simpara><literal>excludeDeleted</literal></simpara>
<simpara>The value is a boolean (<literal>true</literal> or <literal>false</literal>).  If it is <literal>true</literal>, query will not return soft deleted entities. An entity is
considered as soft deleted if its <literal>deleted</literal> property is equals to <literal>'Y'</literal>.</simpara>
</listitem>
<listitem>
<simpara><literal>orderBy</literal></simpara>
<simpara>The value must be a string.  Use this key to sort current query.  If you have multiple attributes to sort, separate them by comma,
 for example:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">myRepository.findAllInvoice([orderBy: 'number,date'])</programlisting>
<simpara>If you want to sort by nested property, use double underscore (<literal>__</literal>) as separator.</simpara>
</listitem>
<listitem>
<simpara><literal>orderDirection</literal></simpara>
<simpara>The value must be one of the following string: <literal>asc</literal> or <literal>desc</literal>.  This key is used to specify the direction of order in <literal>orderBy</literal>.
For example, the following query will find all invoices sorted by number in ascending direction and date in descending direction:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">myRepository.findAllInvoice([orderBy: 'number,date', orderDirection: 'asc,desc'])</programlisting>
</listitem>
<listitem>
<simpara><literal>page</literal></simpara>
<simpara>The value must be a number starting from <literal>1</literal>.  Use this key together with <literal>pageSize</literal> to limit query result.  Default value for
<literal>page</literal> is <literal>1</literal>.</simpara>
</listitem>
<listitem>
<simpara><literal>pageSize</literal></simpara>
<simpara>The value must be a positive number.  Use this key to set the size for current page.  If <literal>page</literal> is specified but <literal>pageSize</literal>
 is not set, then it is assumed to be <literal>10</literal>.  If both <literal>page</literal> and <literal>pageSize</literal> is not specified, there will be no limit for this query.</simpara>
<simpara>For example, to retrieve only 3 first invoices, you can use the following configuration:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">myRepository.findAllInvoice([pageSize:3])</programlisting>
</listitem>
<listitem>
<simpara><literal>allowDuplicate</literal></simpara>
<simpara>The value is a boolean (<literal>true</literal> or <literal>false</literal>).  Set it to <literal>true</literal> to never returns duplicate entities.  This configuration adds
 <literal>SELECT DISTINCT</literal> to current query.</simpara>
</listitem>
<listitem>
<simpara><literal>fetchGraph</literal></simpara>
<simpara>This key accepts a <literal>String</literal> or an instance of <literal>EntityGraph</literal> created by using <literal>entityManager.createEntityGraph()</literal>.  If you
 have defined named entity graph called <literal>Invoice.Items</literal>, you can use it in finders like:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">myRepository.findAllInvoice([fetchGraph: 'Invoice.Items'])</programlisting>
<simpara>Or, you can also build the named entity graph in runtime such as in this sample:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">myRepository.withTransaction {
    def em = getEntityManager()
    def g = em.createEntityGraph(Invoice)
    g.addAttributeNodes('items')
    findAllInvoice([fetchGraph: g])
}</programlisting>
</listitem>
<listitem>
<simpara><literal>loadGraph</literal></simpara>
<simpara>This key accepts a <literal>String</literal> or an instance of <literal>EntityGraph</literal> created by using <literal>entityManager.createEntityGraph()</literal>.  See
 the description of <literal>fetchGraph</literal> for more information.</simpara>
</listitem>
</itemizedlist>
<simpara>You can also add some of the query configurations described above in <literal>Config.groovy</literal>.  This way the configuration is
 globally applied to all finders that can accepts it.  The following table lists all query configurations that
  can be added in <literal>Config.groovy</literal>:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Query Configuration In <literal>Config.groovy</literal></title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="33*"/>
<colspec colname="col_2" colwidth="33*"/>
<colspec colname="col_3" colwidth="33*"/>
<thead>
<row>
<entry align="left" valign="top">Name</entry>
<entry align="left" valign="top">Default Value</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>griffon.simplejpa.entityManager.defaultFlushMode</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>FlushModeType.AUTO</literal></simpara></entry>
<entry align="left" valign="top"><simpara>You can also change the flush mode to <literal>FlushModeType.COMMIT</literal> (or just <literal>'COMMIT'</literal>).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>griffon.simplejpa.finders.alwaysExcludeSoftDeleted</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>false</literal></simpara></entry>
<entry align="left" valign="top"><simpara>If this value is <literal>true</literal>, finders will not return soft deleted entities.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>griffon.simplejpa.finders.alwaysAllowDuplicate</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>true</literal></simpara></entry>
<entry align="left" valign="top"><simpara>The default value always add <literal>SELECT DISTINCT</literal> to the generated query.  If you don&#8217;t need this feature, you can
increase performance by setting this value to <literal>false</literal>.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
</section>
</section>
<section xml:id="testing">
<title>Testing</title>
<section xml:id="unit-test">
<title>Unit Test</title>
<simpara>In unit test, you&#8217;re usually testing domain classes.  This test should never requires database connection.  Unfortunately,
 sometimes domain class may depends on persistence methods in repository, for example:</simpara>
<formalpara>
<title>InvoiceRepository.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">class RegistrationRepository {

  // This methods hits database to retrieve last number and increase it by one.
  Integer nextNumber() {
    ...
  }

}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Registration.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">class Registration {

  String reserveNumber(Integer input) {
    ...
    def repo = SimpleJpaUtil.instance.repositoryManager.getRepository('RegistrationRepository')
    def number = repo.nextNumber()
    ...
  }

}</programlisting>
</para>
</formalpara>
<simpara>You can&#8217;t test <literal>Registration.reserveNumber()</literal> directly because it calls <literal>RegistrationRepository.nextNumber()</literal> that requires
access to database.  For example, the following unit test will fail:</simpara>
<formalpara>
<title>RegistrationTests.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">class RegistrationTests extends GriffonUnitTestCase {

  void testReserveNumber() {
      Registration r = new Registration()
      assertEquals('REG-001', r.reserveNumber(1))
  }

}</programlisting>
</para>
</formalpara>
<simpara>To solve this problem, you need to create a stub repository, for example:</simpara>
<formalpara>
<title>RegistrationTests.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">class RegistrationTests extends GriffonUnitTestCase {

  void setUp() {
    super.setUp()
    super.registerMetaClass(NumberingRepository)
    NumberingRepository.metaClass.reserveNumber = {
        // stub for reserveNumber() that always return 0.
        return 0
    }
    StubRepositoryManager stubRepositories = new StubRepositoryManager()
    stubRepositories.instances['NumberingRepository'] = new NumberingRepository()
    SimpleJpaUtil.instance.repositoryManager = stubRepositories
  }

  void testReserveNumber() {
    Registration r = new Registration()
    assertEquals('REG-001', r.reserveNumber(1))
  }

}</programlisting>
</para>
</formalpara>
</section>
<section xml:id="integration-test">
<title>Integration Test</title>
<simpara>simple-jpa provides <literal>DbUnitTestCase</literal> to help you in performing integration testing that actually hits database.  <literal>DbUnitTestCase</literal>
 uses DbUnit to populate databases with certain records for every test case.   The following sample show a basic usage of
 <literal>DbUnitTestCase</literal>:</simpara>
<formalpara>
<title>InvoiceTest.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">class InvoiceTest extends DbUnitTestCase {

  InvoiceRepository invoiceRepository

  protected void setUp() {
     super.setUp()
     setUpDatabase('/project/data.xlsx')
     invoiceRepository = SimpleJpaUtil.instance.repositoryManager.findRepository('Invoice')
  }

  void testDelete() {
     Invoice newInvoice = invoiceRepository.findInvoiceById(-1l)
     invoiceRepository.remove(newInvoice)
     newInvoice = invoiceRepository.findInvoiceById(-1l)
     assertNull(newInvoice)
  }

}</programlisting>
</para>
</formalpara>
<simpara>When you execute the test by using <literal>griffon test-app</literal>, <literal>setUpDatabase()</literal> is called before executing test methods.  By default,
  <literal>setUpDatabase()</literal> performs a clean insert (<literal>DatabaseOperation.CLEAN_INSERT</literal>) on database.  Tables contents are deleted first then
  new records are inserted based on the value in <literal>/project/data.xlsx</literal>.  Because this process is repeated for every test methods,
  you can assume that database is in the expected state when test methods begin.</simpara>
<simpara><literal>DbUnitTestCase</literal> supports the following format as data source:</simpara>
<itemizedlist>
<listitem>
<simpara>Microsoft Excel binary format if filename ends with <literal>.xls</literal>.  Every sheets represents a table.  Rows are table records and columns are
table columns.</simpara>
</listitem>
<listitem>
<simpara>Microsoft Excel XML format (the newer version) if filename ends with <literal>.xlsx</literal>.</simpara>
</listitem>
<listitem>
<simpara>XML file if filename ends with <literal>.xml</literal>.</simpara>
</listitem>
<listitem>
<simpara>If <literal>DbUnitTestCase</literal> can&#8217;t decide the type of data source, it assumes the data source is in CSV format.</simpara>
</listitem>
</itemizedlist>
<simpara><literal>DbUnitTestCase</literal> also executes the following SQL files if it founds them in root package:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>before.sql</literal> is executed before cleaning and executing test method.</simpara>
</listitem>
<listitem>
<simpara><literal>clean.sql</literal> is executed  before inserting data to database.</simpara>
</listitem>
<listitem>
<simpara><literal>after.sql</literal> is executed after database has been populated.  Test method begins after this script is executed.</simpara>
</listitem>
</itemizedlist>
<tip>
<simpara>To avoid problem related to foreign key constraints, you can drop your table manually in <literal>before.sql</literal> or <literal>clean.sql</literal> in
 the correct order.  If you use MySQL Server, you can use <literal>SET FOREIGN_KEY_CHECKS=0</literal> to disable foreign key constraints and
  <literal>SET FOREIGN_KEY_CHECKS=1</literal> to enable foreign key constraints.</simpara>
</tip>
<simpara>By default, <literal>DbUnitTestCase</literal> performs <literal>DatabaseOperation.CLEAN_INSERT</literal> for every methods.  You can change this by setting
 <literal>insertOperation</literal> with a different value, for example:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">class InvoiceTest extends DbUnitTestCase {

  protected void setUp() {
     super.setUp()
     setUpDatabase('/project/data.xlsx', null, false, DatabaseOperation.UPDATE)
  }

}</programlisting>
<simpara>For advanced use case, you can always override or execute public methods provided by <literal>DbUnitTestCase</literal>:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>loadMVC(mvcGroup)</literal></simpara>
<simpara>Create MVCGroup instance specified by the name.  You can then use <literal>model</literal>, <literal>view</literal> and <literal>controller</literal> property to
access this MVC instance members.</simpara>
</listitem>
<listitem>
<simpara><literal>beforeSetupDatabase()</literal></simpara>
<simpara>Use this method to execute <literal>before.sql</literal> if it is found in root package.  This method is called at the beginning of test method.</simpara>
</listitem>
<listitem>
<simpara><literal>cleanDataset()</literal></simpara>
<simpara>Use this method to execute <literal>clean.sql</literal> if it is found in root package.  This method is called before <literal>insertOperation</literal> is executed.</simpara>
</listitem>
<listitem>
<simpara><literal>afterSetupDatabase()</literal></simpara>
<simpara>Use this method to execute <literal>after.sql</literal> if it is found in root package.  This method is called after <literal>insertOperation</literal> is executed and
before test method begins.</simpara>
</listitem>
<listitem>
<simpara><literal>execute(list)</literal></simpara>
<simpara>Execute a list of SQL statements.</simpara>
</listitem>
<listitem>
<simpara><literal>cleanInsert()</literal></simpara>
<simpara>Perform a <literal>DatabaseOperation.CLEAN_INSERT</literal> based on current data source.</simpara>
</listitem>
<listitem>
<simpara><literal>truncateTable()</literal></simpara>
<simpara>Perform a <literal>DatabaseOperation.TRUNCATE_TABLE</literal> based on current data source.</simpara>
</listitem>
<listitem>
<simpara><literal>deleteAll()</literal></simpara>
<simpara>Perform a <literal>DatabaseOperation.DELETE_ALL</literal> based on current data source.</simpara>
</listitem>
<listitem>
<simpara><literal>refresh()</literal></simpara>
<simpara>Perform a <literal>DatabaseOperation.REFRESH</literal> based on current data source.</simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="deployment">
<title>Deployment</title>

</section>
<appendix xml:id="script">
<title>Script</title>
<simpara>simple-jpa scripts can be called just like any Griffon&#8217;s commands:</simpara>
<screen>griffon [command-name] [argument1] [argument2] ...</screen>
<simpara>To display more information for a command, call it with <literal>-info</literal> argument:</simpara>
<screen>griffon [command-name] -info</screen>
<section xml:id="create-simple-jpa">
<title>create-simple-jpa</title>
<simpara>This command is usually the first command that will be invoked before working with Java Persistence API (JPA).
It will create persistence.xml and orm.xml in current project. It will also create some resource files that are commonly
required when working with JPA.</simpara>
<simpara>The syntax for this command is:</simpara>
<screen>create-simple-jpa -user=[databaseUser] -password=[databasePassword]
    -database=[databaseName] -rootPassword=[databaseRootPassword]
    -provider=[JPAProvider] -jdbc=[databaseType]</screen>
<simpara>or</simpara>
<screen>create-simple-jpa -user=[databaseUser] -password=[databasePassword]
    -database=[databaseName] -provider=[JPAProvider]
    -jdbc=[databaseType] -skipDatabase</screen>
<variablelist>
<varlistentry>
<term><literal>user</literal></term>
<listitem>
<simpara>The name of database user. JPA will establish connection to database by using the specified user name. If user name
doesn&#8217;t exists, it will be created automatically.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>password</literal></term>
<listitem>
<simpara>The password used when establishing connection to the database.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>database</literal></term>
<listitem>
<simpara>The database name or schema name. If this database doesn&#8217;t exists, it will be created automatically.
The specified user will also be granted privilleges to use this database.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>rootPassword</literal></term>
<listitem>
<simpara>The password for database root/administrator. To create user and database and grants privilleges, this command requires
password for root/administrator user. This value will never be stored in project files.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>provider</literal></term>
<listitem>
<simpara>The name of JPA provider that will be used. The default value for this parameter is <literal>hibernate</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>jdbc</literal></term>
<listitem>
<simpara>The name of JDBC driver that will be used. The default value for this parameter is <literal>mysql</literal>. The following available
values are <literal>mysql</literal> for using MySQL JDBC or <literal>derby-embedded</literal> for using Apache Derby embedded database JDBC.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>skipDatabase</literal></term>
<listitem>
<simpara>If this argument exists, <literal>create-simple-jpa</literal> will not create user and database automatically. It will only write
to <literal>persistence.xml</literal> and assume required database schema and user is available.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>For example, the following command will generate <literal>persistence.xml</literal> with a connection to MySQL database
(user: steven, password: 12345, database schema: sample), uses Hibernate JPA, and creates user steven and sample schema
if they are not exists:</simpara>
<screen>griffon create-simple-jpa -user=steven -password=12345 -database=sample
    -rootPassword=secret</screen>
<simpara>The following command will do the same as the previous one:</simpara>
<screen>griffon create-simple-jpa -user=steven -password=12345 -database=sample
    -provider=hibernate -jdbc=mysql -rootPassword=secret</screen>
<simpara>The following command will generate <literal>persistence.xml</literal> with a connection to MySQL database (user: scott, password: tiger,
database schema: ha), uses Hibernate JPA, and will not check if required user and schema are available:</simpara>
<screen>griffon create-simple-jpa -user=scott -password=tiger -database=ha
    -skip-database</screen>
<simpara>If you use <literal>-jdbc=derby-embedded</literal>, <literal>-database</literal> should be a full path to directory such as
<emphasis>C:/Users/me/mydb</emphasis>.</simpara>
</section>
<section xml:id="create-domain-class">
<title>create-domain-class</title>
<simpara>This command will create a new empty domain class and register it in persistence context file. Before creating domain
class, the project must has <literal>persistence.xml</literal> file in <literal>metainf</literal> directory. To generate required files for working with
JPA, use <literal>create-simple-jpa</literal> command.</simpara>
<simpara>Domain class will be generated in the package specified by <literal>griffon.simplejpa.model.package</literal> value. The default package
is <literal>domain</literal>.</simpara>
<simpara>To change the default template used for generating domain clasess, execute <literal>install-templates</literal> command and edit
<literal>SimplaJpaDomainClass.groovy</literal>.</simpara>
<simpara>The syntax for this command is:</simpara>
<screen>create-domain-class [domainClassName]</screen>
<simpara>or</simpara>
<screen>create-domain-class [domainClassName] [domainClassName] ...</screen>
<simpara>or</simpara>
<screen>create-domain-class [domainClassName],[domainClassName], ...</screen>
<variablelist>
<varlistentry>
<term><literal>domainClassName</literal></term>
<listitem>
<simpara>The name of domain class that will be generated.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Examples:</simpara>
<screen>griffon create-domain-class Student</screen>
<screen>griffon create-domain-class Teacher Student</screen>
<screen>griffon create-domain-class Teacher,Student</screen>
</section>
<section xml:id="generate-all">
<title>generate-all</title>
<simpara>This command will create a new <literal>MVCGroup</literal> based on a domain class. The generated MVCGroup (consists of a view, a model
and a controller) has the ability to perform CRUD operations on a domain class. This command can also generate a startup
<literal>MVCGroup</literal> that act as container for the others.</simpara>
<simpara>Domain classes should be located in the package specified by <literal>griffon.simplejpa.model.package</literal> in <literal>Config.groovy</literal>. The
default value for package is <literal>domain</literal>.</simpara>
<simpara>When the value of <literal>griffon.simplejpa.finders.alwaysExcludeSoftDeleted</literal> is <literal>true</literal>, the generated controller will call
<literal>softDelete()</literal> instead of <literal>remove()</literal>.</simpara>
<simpara>To change the default template used by this command, execute <literal>install-templates</literal> command and edit the generated template
files.</simpara>
<simpara>The syntax for this command is:</simpara>
<screen>generate-all * [-generatedPackage] [-forceOverwrite] [-setStartup]
    [-skipExcel] [-startupGroup=value]</screen>
<simpara>or</simpara>
<screen>griffon generate-all [domainClassName] [-generatedPackage]
    [-forceOverwrite] [-setStartup] [-skipExcel]
    [-startupGroup=value]</screen>
<simpara>or</simpara>
<screen>generate-all [domainClassName] [domainClassName] ...
    [-generatedPackage] [-forceOverwrite] [-setStartup] [-skipExcel]
    [-startupGroup=value]</screen>
<variablelist>
<varlistentry>
<term><literal>domainClassName</literal></term>
<listitem>
<simpara>The name of domain class the will be manipulated by the generated <literal>MVCGroup</literal>. Each domain class
will have their own <literal>MVCGroup</literal> generated. If this value is <literal>*</literal>, then all domain classes will be processed.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>generatedPackage</literal> (optional)</term>
<listitem>
<simpara>The target package. By default, the value for this parameter is project.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>forceOverwrite</literal> (optional)</term>
<listitem>
<simpara>If exists, this script will replace existing files without any notifications.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>setStartup</literal> (optional)</term>
<listitem>
<simpara>If exists, this script will set the generated MVCGroup as startup (the <literal>MVCGroup</literal> will be launched when program starts).
If this argument is present when generating more than one MVCGroup, then only the last MVCGroup will be set as startup
group.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>skipExcel</literal> (optional)</term>
<listitem>
<simpara>If exists, this script will not create Microsoft Excel file for integration testing (DbUnit).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>startupGroup</literal> (optional)</term>
<listitem>
<simpara>The name for MVCGroup that serves as startup group. The generated MVCGroup will not based on any domain class, instead
it will act as a container for the other domain classes&#8217; based MVCGroups.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>For example, the following command will generate MVCGroup for all domain classes:</simpara>
<screen>griffon generate-all *</screen>
<simpara>The following command will generate MVCGroup for all domain classes, overwriting existing files, and set the last
MVCGroup as startup:</simpara>
<screen>griffon generate-all * -forceOverwrite -setStartup</screen>
<simpara>The following command will generate MVCGroup for domain class <literal>Student</literal>, <literal>Teacher</literal>, and <literal>Classroom</literal>:</simpara>
<screen>griffon generate-all Student Teacher Classroom</screen>
<simpara>The following command will generate MVCGroup for domain class <literal>Student</literal> and generate a container MVCGroup which name is
<literal>MainGroup</literal>:</simpara>
<screen>griffon generate-all Student -startupGroup=MainGroup</screen>
<simpara>The following command will generate a container MVCGroup which name is <literal>MainGroup</literal>:</simpara>
<screen>griffon generate-all -startupGroup=MainGroup</screen>
</section>
<section xml:id="install-templates">
<title>install-templates</title>
<simpara>This command will add templates used by simple-jpa to current project in <literal>/src/templates/artifacts</literal>. This command is
useful for changing templates that is used by simple-jpa generator. Developer can edit the templates and the next
invocation of simple-jpa generator will based on them.</simpara>
<simpara>The syntax for this command is:</simpara>
<screen>install-templates</screen>
<simpara>Example:</simpara>
<screen>griffon install-templates</screen>
</section>
<section xml:id="simple-jpa-console">
<title>simple-jpa-console</title>
<simpara>This command will launch Groovy Console loaded with Griffon and simple-jpa. Developer can use this command to test or
execute code interactively.</simpara>
<simpara>For each loaded MVCGroup, there are three variables to refer to its model, view, and controller. For example, if
MVCGroup name is <literal>student</literal>, developer can refer to its model, view, or controller by using the following variables:
<literal>studentModel</literal>, <literal>studentController</literal> and <literal>studentView</literal>. Developer can also use <literal>app</literal> to refer to GriffonApplication.
To display list of available variables, select <emphasis role="strong">Script</emphasis>, <emphasis role="strong">Inspect Variables</emphasis>.</simpara>
<simpara>When console is started, it only loads startup MVCGroup. To load the another MVCGroup, select <emphasis role="strong">simple-jpa</emphasis>, <emphasis role="strong">MVCGroups</emphasis>.</simpara>
<simpara>The syntax for this command is:</simpara>
<screen>simple-jpa-console</screen>
<simpara>Examples:</simpara>
<screen>griffon simple-jpa-console</screen>
</section>
<section xml:id="generate-schema">
<title>generate-schema</title>
<simpara>This command will generate database schema based on current domain models mapping to database or scripts. Developer can
use this command to retrieve SQL scripts that can be used to populate new database schema for current application.</simpara>
<simpara>The syntax for this command is:</simpara>
<screen>generate-schema -target=database -action=[action]</screen>
<simpara>or</simpara>
<screen>generate-schema -target=database -action=[action] -data=[script.sql]</screen>
<simpara>or</simpara>
<screen>generate-schema -target=script -action=[action]
                -dropTarget=[script.sql]
                -createTarget=[script.sql]</screen>
<variablelist>
<varlistentry>
<term><literal>target</literal></term>
<listitem>
<simpara>One of <literal>database</literal> or <literal>script</literal>. If target is <literal>database</literal>, this script will create database objects in the database
configured in <literal>persistence.xml</literal>. You shouldn&#8217;t need this target because by default, database objects will be dropped and
generated when application is launched. If target is <literal>script</literal>, this command will generate SQL scripts that can be
executed later (perhaps in a new database schema).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>action</literal></term>
<listitem>
<simpara>Valid values are <literal>none</literal>, <literal>create</literal>, <literal>drop-and-create</literal>, and <literal>drop</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>data</literal> (optional)</term>
<listitem>
<simpara>Contains SQL script location that will be executed after database objects are created. The purpose of this script is to
initialize database (for example, populating tables with initial data).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>dropTarget</literal></term>
<listitem>
<simpara>Available if <literal>target</literal> is <literal>script</literal>. This is the value of file that will be generated and contains DDL DROP scripts.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>createTarget</literal></term>
<listitem>
<simpara>Available if <literal>target</literal> is <literal>script</literal>. This is the value of file that will be generated and contains DDL CREATE scripts.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Examples:</simpara>
<screen>griffon generate-schema -target=database -action=drop-and-create</screen>
<screen>griffon generate-schema -target=script -action=drop-and-create
                        -dropTarget=drop.sql -createTarget=target.sql</screen>
</section>
<section xml:id="obfuscate">
<title>obfuscate</title>
<simpara>Use this command to generate obfuscated value that can be added to configuration file or simplejpa.properties. This is
useful to hide sensitive information such as database password from novice users.</simpara>
<simpara>The syntax for this command is:</simpara>
<screen>obfuscate -generate=[value]</screen>
<simpara>or</simpara>
<screen>obfuscate -reverse=[value]</screen>
<simpara>Examples:</simpara>
<screen>griffon obfuscate -generate=mypassword</screen>
<simpara>The command above will generate <literal>obfuscated:AGHJLPazOUvt5ZjzRNnKaA==</literal>. This can be used as a substitution for
configurations that accepts string value. For example, it can be used in <literal>Config.groovy</literal>:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">griffon {
   simplejpa {
      entityManager {
         javax.persistence.jdbc.password = "obfuscated:AGHJLPazOUvt5ZjzRNnKaA=="
      }
   }
}</programlisting>
</section>
<section xml:id="create-repository">
<title>create-repository</title>
<simpara>Use this command to create a new repository.  It is recommended to generate repository automatically by using
DDD generator rather than create them manually using this command.</simpara>
<simpara>The syntax for this command is:</simpara>
<screen>create-repository [name]</screen>
<simpara>This command will create new repository class in <literal>griffon-app/repositories</literal>.</simpara>
<simpara>Examples:</simpara>
<screen>create-repository Invoice</screen>
</section>
</appendix>
</article>