{"name":"simple-jpa","tagline":"simple-jpa is a Griffon's plugin for developing JPA and Swing based desktop application.","body":"### What is simple-jpa?\r\n\r\nsimple-jpa is a Griffon’s plugin for developing JPA and Swing based desktop application.  The main goal of simple-jpa is to allow developer to concentrate on business logic.  simple-jpa provides much functionality that is needed when working with JPA, therefore, frees developer from writing high-ceremony code.\r\n\r\nsimple-jpa is very useful for rapidly developing Swing-based database oriented desktop application.  It can also be used for prototyping.\r\n\r\nThe following is a list of some of simple-jpa’s features:\r\n\r\n**Scaffolding** – simple-jpa can generate an MVCGroup based on a domain class.  This will speed up development.\r\n\r\n**Dynamic finders** – simple-jpa injects dynamic finders to controllers (or services).  With dynamic finders, developer can perform a query on JPA entities (or domain objects) quickly and easily.  simple-jpa also supports the execution of JPA named query, JPQL and native SQL.\r\n\r\n**Transaction management** – Unlike web-based applications, desktop applications do not require Java Transaction API (JTA).  simple-jpa automatically provides and manages transaction for each method in controllers (can be configured by using annotation).  By default, simple-jpa will share EntityManager across transaction in a way that is suitable for desktop application.\r\n\r\n**Bean Validation API (JSR-303) support** – In the case of failed validation, simple-jpa will automatically present error messages in Swing-based view.  Developer can also configure error notification and its behavior.\r\n\r\n**Common database application features** – simple-jpa adds the following to all domain classes: an id (auto generated primary key), fields that store created time and last modified time (will be filled automatically), and a soft delete flag (soft delete is marking the object as inactive without deleting it from database).\r\n\r\n**Swing nodes for database application** - simple-jpa provides template renderer for effortlessly represent domain object in JTable, JList or JComboBox.  It also provides new nodes that can be used in Griffon’s view such as tagChooser, numberTextField, maskTextField, and dateTimePicker.\r\n\r\n**Integration testing** – simple-jpa is using dbUnit in integration testing to fill database with predefined data from a Microsoft Excel file (or csv file).  This way, every test cases will be executed with the same table data.\r\n\r\n### Bookstore Tutorial\r\n\r\nThis tutorial will assume that you are using the following software:\r\n\r\n1. Windows operating system\r\n1. Java Development Kit 7\r\n1. Griffon 1.2\r\n1. simple-jpa 0.4\r\n1. IntelliJ IDEA\r\n1. MySQL Server\r\n\r\nThe first step is creating a new Griffon application.  You can do this by opening Command Prompt and entering the following commands:\r\n\r\n    mkdir c:\\projects\r\n    cd c:\\projects\r\n    griffon create-app bookstore\r\n\r\nYou can change *c:\\projects* in the above commands to another directory.  If that directory already exists, you can skip the ‘mkdir` command.\r\n\r\nGriffon will create a subdirectory called *bookstore* that contains your project’s files, including source code.  You will need to move to this directory by entering the following command:\r\n\r\n    cd bookstore\r\n\r\nNext, you will install simple-jpa plugin by entering the following command:\r\n\r\n    griffon install-plugin simple-jpa 0.4\r\n\r\nIf simple-jpa has never been installed on your computer, Griffon will download required files for the first time.  simple-jpa is a fat plugin with a lot of dependencies, so you may need to wait.\r\n  \r\nAfter simple-jpa has been downloaded and installed, the next step is integrating your project with IntelliJ IDEA by entering the following command:\r\n\r\n    griffon integrate-with -–idea\r\n\r\nYou can also replace *--idea* with *--eclipse* if you’re using Eclipse.  In the above command, Griffon will create an IntelliJ IDEA project in your current directory.  You can also create a new Griffon’s project in IntelliJ IDEA from the beginning, without using any command line as in this tutorial, but there is a drawback. If you create project and install simple-jpa from inside IntelliJ IDEA, dependencies for current project will not setup properly and autocomplete for project dependencies will not work.\r\n\r\nYou can start IntelliJ IDEA now.  With IntelliJ IDEA running, select *Open Project*, browse to *C:\\projects\\bookstore*, and then click on *OK* button to open your project.\r\n\r\n![Opening Griffon's project in IntelliJ IDEA](images/picture1.PNG)\r\n\r\nJPA application development usually starts with creating *persistence.xml*.  This file will contain information required for database connection and JPA configurations.  It will also contain a list of entities that will be managed by JPA.   \r\n\r\nThe next most common thing to start with is creating database user and schema.\r\n\r\nTo keep things simple, you will use `create-simple-jpa` command.  This command will generate *persistence.xml* for you.  If you want it to also generate database schema and a new user, you will need to provide MySQL’s root password.  Note that MySQL’s root password will not be saved and will not be used inside application.\r\n\r\nIn this step, you will create *persistence.xml*, a new database named *bookstore* and a database user *steven* (whose password is *12345*).   You will need to select *Tools*, *Griffon*, *Run Target* (or press Ctrl+Alt+G) and enter the following command:\r\n\r\n    create-simple-jpa --user=steven --password=12345 --database=bookstore --rootPassword=adminpassword\r\n\r\n![Entering Griffon's command in IntelliJ IDEA](images/picture2.PNG)\r\n\r\nThe command above is assuming that your root password is *adminpassword*.  In some cases, your root password may be empty, so you will need to use the following command instead:\r\n\r\n    create-simple-jpa --user=steven --password=12345 --database=bookstore --rootPassword=\r\n\r\nIf you only want to generate *persistence.xml* without performing any database operations, you can use the following command instead:\r\n\r\n    create-simple-jpa --user=steven --password=12345 --database=bookstore --skipDatabase=true\r\n\r\nThe next step will be creating domain classes.  Your bookstore application will have the following domain classes: *TransactionOrder*, *OrderItem*, *Book*, and *Author*.  To create domain classes and add their location to *persistence.xml*, you will need to enter the following command:\r\n\r\n    create-domain-class TransactionOrder OrderItem Book Author\r\n\r\nYou will find all generated domain classes in the *domain* package.  They are plain JPA entities that follow JPA rules.\r\n\r\n![simple-jpa domain classes](images/picture3.PNG)\r\n\r\nOpen *TransactionOrder.groovy* and add some members to this domain class:\r\n\r\n    package domain\r\n    import …\r\n\r\n    @DomainModel @Entity @Canonical\r\n    class TransactionOrder {\r\n\r\n       @NotEmpty @Size(min=5, max=5)\r\n       String orderNumber\r\n\r\n       @Type(type=\"org.jadira.usertype.dateandtime.joda.PersistentLocalDate\")\r\n       LocalDate orderDate\r\n\r\n       @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true , mappedBy=\"transactionOrder\")\r\n       List<OrderItem> orderItemList = []\r\n\r\n       BigDecimal getAmount() {\r\n          orderItemList.sum { it.amount }\r\n       }\r\n\r\n    }\r\n\r\nP.S.: If you didn’t add `cascade` and `orphanRemoval` to `@OneToMany` annotation, the code generated by scaffolding will not work.  You’re also expected to initialize the `Collection`.\r\n\r\nOpen *OrderItem.groovy* and add some members to this domain class:\r\n\r\n    package domain\r\n\r\n    import ...\r\n\r\n    @DomainModel @Entity @Canonical (excludes = \"transactionOrder\")\r\n    class OrderItem {\r\n\r\n       @NotNull @ManyToOne\r\n       Book book\r\n\r\n       @NotNull @Min(1l)\r\n       Integer quantity\r\n\r\n       @ManyToOne\r\n       TransactionOrder transactionOrder\r\n\r\n       BigDecimal getAmount() {\r\n          book.price * quantity\r\n       }\r\n\r\n    }\r\n\r\nOpen *Author.groovy* and add some members to this domain class:\r\n\r\n    package domain\r\n\r\n    import ...\r\n\r\n    @DomainModel @Entity @Canonical (excludes = \"bookList\")\r\n    class Author {\r\n    \r\n       @NotEmpty @Size(min=2, max=100)\r\n       String firstName\r\n    \r\n       @Size(min=2, max=100)\r\n       String lastName\r\n    \r\n       @Email\r\n       String email\r\n    \r\n       @ManyToMany(mappedBy=\"authorList\")\r\n       List<Book> bookList\r\n\r\n    }\r\n\r\nOpen *Book.groovy* and add some members to this domain class:\r\n\r\n    package domain\r\n\r\n    import ...\r\n\r\n    @DomainModel @Entity @Canonical\r\n    class Book {\r\n\r\n       @NotEmpty @Size(min=9, max=13)\r\n       String isbn\r\n\r\n       @NotEmpty @Size(min=2, max=100)\r\n       String title\r\n    \r\n       @NotNull @Min(1l)\r\n       BigDecimal price\r\n    \r\n       @NotEmpty @ManyToMany\r\n       List<Author> authorList\r\n\r\n    }\r\n\r\nYour next step will be generating Griffon’s `MVCGroup`s based on your domain classes.  To do this, enter the following command:\r\n\r\n    generate-all * --startupGroup=MainGroup\r\n\r\nsimple-jpa will create one `MVCGroup` per domain class.  Each `MVCGroup` has model, view and controller that are capable of performing create, read, update and delete operation.\r\n\r\nThe above command will also generate one special `MVCGroup` named *MainGroup* which is a startup group.  This `MVCGroup` will act as a main window that provides button to launch other `MVCGroup`s.\r\n\r\nBy default, `generate-all` will not replace existing files.  If you really want to overwrite existing files, you can use the following command instead:\r\n\r\n    generate-all * --startupGroup=MainGroup --force-overwrite\r\n\r\nUp to this point, you already have a working bookstore application. You don’t need to worry about creating database tables because simple-jpa has added `hibernate.hbm2ddl.auto` to *persistence.xml*.  This configuration will instruct Hibernate JPA to automatically create tables for domain classes in application startup.  \r\n\r\nYou can start your application by entering the following command:\r\n\r\n    run-app\r\n\r\nThe startup group’s view contains buttons that link to the others.\r\n\r\n![simple-jpa startup group](images/picture4.PNG)\r\n\r\nP.S.: Every time you start your application, data in tables will be discarded.  You will need to remove `hibernate.hbm2dll.auto` in *persistence.xml* if you want to preserve data in your tables.\r\n\r\nOne of simple-jpa’s nice features is that it knows about your domain classes’ relationship.  simple-jpa will generate a special `MVCGroup` if it finds one-to-one and one-to-many relationship.  For example, if you open Transaction Order view, you will find an Order Item List button.  This is an example of one-to-many relationship.  If you click on the button, a dialog to input one or more `OrderItem` will be displayed.\r\n\r\n![scaffolding one-to-many](images/picture5.PNG)\r\n\r\nIf you have examined the startup group clearly, you will find that there is an Order Item menu in your startup group.  This is usually undesirable, because, user will always open Order Item view from Transaction Order view.  You can remove it by opening *MainGroupView.groovy*, deleting line 12 and 27 as shown below:\r\n\r\n    actions {\r\n       …\r\n       action(id: 'orderItem', name: 'Order Item', actionCommandKey: 'orderItem', closure: controller.switchPage)\r\n        …\r\n    }\r\n\r\n    toolBar(constraints: BorderLayout.PAGE_START, floatable: false) {\r\n        …\r\n        button(action: orderItem, verticalTextPosition: SwingConstants.BOTTOM, horizontalTextPosition: SwingConstants.CENTER)\r\n        …\r\n    }\r\n\r\nYour bookstore application will perform validation based on the annotations in domain classes.  For example, `firstName` in `Author` class has `@NotEmpty` annotation.  If user didn’t input author’s first name when entering new data, your application will display an error message.\r\n\r\n![simple-jpa validation](images/picture6.PNG)\r\n\r\nIf user input a new `Book`, he will need to choose authors (one or more) from simple-jpa’s *tagChooser*.  By default, simple-jpa will use *tagChooser* if it encounters many-to-many relationship.  *tagChooser* will display String version of domain object which is obtained by calling `toString()`.  This is often seen as undesirable.\r\n \r\n![simple-jpa tagChooser](images/picture7.PNG)\r\n\r\nYou can use template renderer to represent domain object in more informative text.  For example, open *BookView.groovy* and change line 53 to the following:\r\n\r\n    tagChooser(model: model.authorList, templateString: '${value.firstName} - ${value.lastName}',\r\n       constraints: 'grow,push,span,wrap', errorPath: 'authorList')\r\n\r\nIn the code above, you’re using simple-jpa’s template renderer to display `Author`’s first name and last name in *tagChooser*.  Template renderer can accept any valid Groovy expression.\r\n\r\n![simple-jpa template renderer](images/picture8.PNG)\r\n\r\nYou can also use template renderer in table.  For example, in the picture above, the fourth column (author list) is hard to read.  Open *BookView.groovy* and change line 36 to the following:\r\n\r\n    columnValues: ['${value.isbn}', '${value.title}', '${value.price}',\r\n        '<% out << value.authorList.collect{ \"${it.firstName} - ${it.lastName}\"}.join(\", \") %>'])\r\n\r\nThe expression above will display a comma separated list of authors for each book.\r\n\r\n![Using simple-jpa template renderer in table](images/picture9.PNG)\r\n\r\nIf you are displaying number or money amount in template renderer, you can also use simple-jpa’s formatter functions such as `numberFormat()` or `currencyFormat()`.  For example, open *TransactionOrderView.groovy* and change line 36 to the following:\r\n\r\n    columnValues: ['${value.orderNumber}', '${value.orderDate}',\r\n        '${value.orderItemList.size()} items, Total ${currencyFormat(value.amount)}'])\r\n\r\n![Using formatter in template renderer](images/picture10.PNG)","google":"UA-41202290-1","note":"Don't delete this file! It's used internally to help with page regeneration."}